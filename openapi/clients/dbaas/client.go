// Package dbaas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package dbaas

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// Defines values for ChangeControlPanelParamsStatus.
const (
	ChangeControlPanelParamsStatusDisable ChangeControlPanelParamsStatus = "disable"
	ChangeControlPanelParamsStatusEnable  ChangeControlPanelParamsStatus = "enable"
)

// Defines values for ChangePublicNetworkParamsStatus.
const (
	ChangePublicNetworkParamsStatusDisable ChangePublicNetworkParamsStatus = "disable"
	ChangePublicNetworkParamsStatusEnable  ChangePublicNetworkParamsStatus = "enable"
)

// CreateDatabases defines model for Create-databases.
type CreateDatabases struct {
	// Hostname The hostname of databases that you want to create
	Hostname *string `json:"hostname,omitempty"`
	Options  *struct {
		StandaloneReplicaSet *bool `json:"standaloneReplicaSet,omitempty"`
	} `json:"options,omitempty"`

	// PlanID The planID of databases that you want to create
	PlanID *string `json:"planID,omitempty"`

	// PublicNetwork The publicNetwork of databases that you want to create
	PublicNetwork *bool `json:"publicNetwork,omitempty"`

	// Type The type of databases that you want to create
	Type *string `json:"type,omitempty"`

	// Version The version of databases that you want to create
	Version *string `json:"version,omitempty"`
}

// DBDetails defines model for DB-details.
type DBDetails struct {
	Database *struct {
		// DBId The ID of the database
		DBId *string `json:"DBId,omitempty"`

		// CreatedAt The creation timestamp of the database
		CreatedAt *string `json:"created_at,omitempty"`

		// DbName The name of db
		DbName *string `json:"dbName,omitempty"`

		// Hostname The hostname of the database
		Hostname *string `json:"hostname,omitempty"`

		// HourlyPrice The hourly price of the database
		HourlyPrice *float32 `json:"hourlyPrice,omitempty"`

		// Id The unique ID of the database
		Id *string `json:"id,omitempty"`

		// InternalPort The internal port of the database
		InternalPort *int `json:"internalPort,omitempty"`
		MetaData     *struct {
			// PrivateNetwork Indicates if the database is on a private network
			PrivateNetwork *bool `json:"privateNetwork,omitempty"`

			// StandaloneReplicaSet Indicates if the database uses a standalone replica set
			StandaloneReplicaSet *bool `json:"standaloneReplicaSet,omitempty"`
		} `json:"metaData,omitempty"`
		Node *struct {
			// UnderscoreId The ID of the database node
			UnderscoreId *string `json:"_id,omitempty"`

			// Host The host of the database node
			Host *string `json:"host,omitempty"`
		} `json:"node,omitempty"`

		// PlanID The plan ID
		PlanID *string `json:"planID,omitempty"`

		// Port The port number for the database connection
		Port *int `json:"port,omitempty"`

		// PublicNetwork Indicates if the database is on a public network
		PublicNetwork *bool `json:"publicNetwork,omitempty"`

		// RootPassword The root password for the database
		RootPassword *string `json:"root_password,omitempty"`

		// Scale The scale of the database
		Scale *int `json:"scale,omitempty"`

		// Status The status of the database
		Status *string `json:"status,omitempty"`

		// Type The type of the database
		Type *string `json:"type,omitempty"`

		// Username The username associated with the database
		Username *string `json:"username,omitempty"`

		// Version The database version
		Version *string `json:"version,omitempty"`

		// VolumeSize The size of the database volume
		VolumeSize *int `json:"volumeSize,omitempty"`
	} `json:"database,omitempty"`
}

// DBsDetails defines model for DBs-details.
type DBsDetails struct {
	Databases *[]struct {
		// DBId The ID of the database
		DBId *string `json:"DBId,omitempty"`

		// CreatedAt The creation timestamp of the database
		CreatedAt *string `json:"created_at,omitempty"`

		// Hostname The hostname of the database
		Hostname *string `json:"hostname,omitempty"`

		// Id The unique ID of the database
		Id *string `json:"id,omitempty"`

		// InternalPort The internal port of the database
		InternalPort *int `json:"internalPort,omitempty"`

		// PlanID The plan ID
		PlanID *string `json:"planID,omitempty"`

		// PublicNetwork Indicates if the database is on a public network
		PublicNetwork *bool `json:"publicNetwork,omitempty"`

		// Scale The scale of the database
		Scale *int `json:"scale,omitempty"`

		// Status The status of the database
		Status *string `json:"status,omitempty"`

		// Type The type of the database
		Type *string `json:"type,omitempty"`
	} `json:"databases,omitempty"`
}

// DatabasesSettings defines model for Databases-settings.
type DatabasesSettings struct {
	Options *struct {
		ClientEncoding   *string  `json:"clientEncoding,omitempty"`
		ConnectTimeout   *float32 `json:"connectTimeout,omitempty"`
		MaxAllowedPacket *float32 `json:"maxAllowedPacket,omitempty"`
		MaxConnections   *float32 `json:"maxConnections,omitempty"`
		MaxJoinSize      *float32 `json:"maxJoinSize,omitempty"`
		NetBufferLength  *float32 `json:"netBufferLength,omitempty"`
		SelectLimit      *float32 `json:"selectLimit,omitempty"`
		SharedBuffers    *float32 `json:"sharedBuffers,omitempty"`
	} `json:"options,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Reports defines model for Reports.
type Reports struct {
	End    *float32 `json:"end,omitempty"`
	Result *[]struct {
		Applet *string                         `json:"applet,omitempty"`
		Values *[][]Reports_Result_Values_Item `json:"values,omitempty"`
	} `json:"result,omitempty"`
}

// ReportsResultValues0 defines model for .
type ReportsResultValues0 = float32

// ReportsResultValues1 defines model for .
type ReportsResultValues1 = string

// Reports_Result_Values_Item defines model for Reports.Result.Values.Item.
type Reports_Result_Values_Item struct {
	union json.RawMessage
}

// TurnDatabaseJSONBody defines parameters for TurnDatabase.
type TurnDatabaseJSONBody struct {
	Scale float32 `json:"scale"`
}

// ChangeControlPanelParamsStatus defines parameters for ChangeControlPanel.
type ChangeControlPanelParamsStatus string

// GetDatabaseCpuReportsParams defines parameters for GetDatabaseCpuReports.
type GetDatabaseCpuReportsParams struct {
	// Since The since of your cpu reports
	Since float32 `form:"since" json:"since"`
}

// GetDatabaseMemoryReportsParams defines parameters for GetDatabaseMemoryReports.
type GetDatabaseMemoryReportsParams struct {
	// Since The since of your memory reports
	Since float32 `form:"since" json:"since"`
}

// GetDatabaseNetworkReceiveReportsParams defines parameters for GetDatabaseNetworkReceiveReports.
type GetDatabaseNetworkReceiveReportsParams struct {
	// Since The since of your network-receive reports
	Since float32 `form:"since" json:"since"`
}

// GetDatabaseNetworkTransmitReportsParams defines parameters for GetDatabaseNetworkTransmitReports.
type GetDatabaseNetworkTransmitReportsParams struct {
	// Since The since of your network-transmit reports
	Since float32 `form:"since" json:"since"`
}

// ChangePublicNetworkParamsStatus defines parameters for ChangePublicNetwork.
type ChangePublicNetworkParamsStatus string

// ResizeDatabaseJSONBody defines parameters for ResizeDatabase.
type ResizeDatabaseJSONBody struct {
	Disk   *bool  `json:"disk,omitempty"`
	PlanID string `json:"planID"`
}

// GetDatabaseEventsParams defines parameters for GetDatabaseEvents.
type GetDatabaseEventsParams struct {
	// Search Show events based on search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Start start timestamp
	Start *float32 `form:"start,omitempty" json:"start,omitempty"`

	// End end timestamp
	End *float32 `form:"end,omitempty" json:"end,omitempty"`
}

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody = CreateDatabases

// TurnDatabaseJSONRequestBody defines body for TurnDatabase for application/json ContentType.
type TurnDatabaseJSONRequestBody TurnDatabaseJSONBody

// ResizeDatabaseJSONRequestBody defines body for ResizeDatabase for application/json ContentType.
type ResizeDatabaseJSONRequestBody ResizeDatabaseJSONBody

// DatabasesSettingsJSONRequestBody defines body for DatabasesSettings for application/json ContentType.
type DatabasesSettingsJSONRequestBody = DatabasesSettings

// AsReportsResultValues0 returns the union data inside the Reports_Result_Values_Item as a ReportsResultValues0
func (t Reports_Result_Values_Item) AsReportsResultValues0() (ReportsResultValues0, error) {
	var body ReportsResultValues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportsResultValues0 overwrites any union data inside the Reports_Result_Values_Item as the provided ReportsResultValues0
func (t *Reports_Result_Values_Item) FromReportsResultValues0(v ReportsResultValues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReportsResultValues0 performs a merge with any union data inside the Reports_Result_Values_Item, using the provided ReportsResultValues0
func (t *Reports_Result_Values_Item) MergeReportsResultValues0(v ReportsResultValues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReportsResultValues1 returns the union data inside the Reports_Result_Values_Item as a ReportsResultValues1
func (t Reports_Result_Values_Item) AsReportsResultValues1() (ReportsResultValues1, error) {
	var body ReportsResultValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportsResultValues1 overwrites any union data inside the Reports_Result_Values_Item as the provided ReportsResultValues1
func (t *Reports_Result_Values_Item) FromReportsResultValues1(v ReportsResultValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReportsResultValues1 performs a merge with any union data inside the Reports_Result_Values_Item, using the provided ReportsResultValues1
func (t *Reports_Result_Values_Item) MergeReportsResultValues1(v ReportsResultValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Reports_Result_Values_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Reports_Result_Values_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetListDatabases request
	GetListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabaseWithBody request with any body
	CreateDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabase(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabase request
	DeleteDatabase(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabase request
	GetDatabase(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TurnDatabaseWithBody request with any body
	TurnDatabaseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TurnDatabase(ctx context.Context, id string, body TurnDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListBackups request
	GetListBackups(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackup request
	CreateBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadBackup request
	DownloadBackup(ctx context.Context, id string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeControlPanel request
	ChangeControlPanel(ctx context.Context, id string, status ChangeControlPanelParamsStatus, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseCpuReports request
	GetDatabaseCpuReports(ctx context.Context, id string, params *GetDatabaseCpuReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseMemoryReports request
	GetDatabaseMemoryReports(ctx context.Context, id string, params *GetDatabaseMemoryReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseNetworkReceiveReports request
	GetDatabaseNetworkReceiveReports(ctx context.Context, id string, params *GetDatabaseNetworkReceiveReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseNetworkTransmitReports request
	GetDatabaseNetworkTransmitReports(ctx context.Context, id string, params *GetDatabaseNetworkTransmitReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseSummaryReports request
	GetDatabaseSummaryReports(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePublicNetwork request
	ChangePublicNetwork(ctx context.Context, id string, status ChangePublicNetworkParamsStatus, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeDatabaseWithBody request with any body
	ResizeDatabaseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResizeDatabase(ctx context.Context, id string, body ResizeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatabasesSettingsWithBody request with any body
	DatabasesSettingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DatabasesSettings(ctx context.Context, id string, body DatabasesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseEvents request
	GetDatabaseEvents(ctx context.Context, name string, params *GetDatabaseEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetListDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListDatabasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabase(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabase(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabase(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TurnDatabaseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTurnDatabaseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TurnDatabase(ctx context.Context, id string, body TurnDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTurnDatabaseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListBackups(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListBackupsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadBackup(ctx context.Context, id string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadBackupRequest(c.Server, id, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeControlPanel(ctx context.Context, id string, status ChangeControlPanelParamsStatus, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeControlPanelRequest(c.Server, id, status)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseCpuReports(ctx context.Context, id string, params *GetDatabaseCpuReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseCpuReportsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseMemoryReports(ctx context.Context, id string, params *GetDatabaseMemoryReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseMemoryReportsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseNetworkReceiveReports(ctx context.Context, id string, params *GetDatabaseNetworkReceiveReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseNetworkReceiveReportsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseNetworkTransmitReports(ctx context.Context, id string, params *GetDatabaseNetworkTransmitReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseNetworkTransmitReportsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseSummaryReports(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseSummaryReportsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePublicNetwork(ctx context.Context, id string, status ChangePublicNetworkParamsStatus, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePublicNetworkRequest(c.Server, id, status)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeDatabaseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeDatabaseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeDatabase(ctx context.Context, id string, body ResizeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeDatabaseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatabasesSettingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatabasesSettingsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatabasesSettings(ctx context.Context, id string, body DatabasesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatabasesSettingsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseEvents(ctx context.Context, name string, params *GetDatabaseEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseEventsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetListDatabasesRequest generates requests for GetListDatabases
func NewGetListDatabasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatabaseRequest calls the generic CreateDatabase builder with application/json body
func NewCreateDatabaseRequest(server string, body CreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDatabaseRequestWithBody generates requests for CreateDatabase with any type of body
func NewCreateDatabaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabaseRequest generates requests for DeleteDatabase
func NewDeleteDatabaseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseRequest generates requests for GetDatabase
func NewGetDatabaseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTurnDatabaseRequest calls the generic TurnDatabase builder with application/json body
func NewTurnDatabaseRequest(server string, id string, body TurnDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTurnDatabaseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTurnDatabaseRequestWithBody generates requests for TurnDatabase with any type of body
func NewTurnDatabaseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/actions/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListBackupsRequest generates requests for GetListBackups
func NewGetListBackupsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/backups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBackupRequest generates requests for CreateBackup
func NewCreateBackupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/backups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadBackupRequest generates requests for DownloadBackup
func NewDownloadBackupRequest(server string, id string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/backups/%s/download", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeControlPanelRequest generates requests for ChangeControlPanel
func NewChangeControlPanelRequest(server string, id string, status ChangeControlPanelParamsStatus) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "status", runtime.ParamLocationPath, status)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/control-panel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseCpuReportsRequest generates requests for GetDatabaseCpuReports
func NewGetDatabaseCpuReportsRequest(server string, id string, params *GetDatabaseCpuReportsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/metrics/cpu", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseMemoryReportsRequest generates requests for GetDatabaseMemoryReports
func NewGetDatabaseMemoryReportsRequest(server string, id string, params *GetDatabaseMemoryReportsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/metrics/memory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseNetworkReceiveReportsRequest generates requests for GetDatabaseNetworkReceiveReports
func NewGetDatabaseNetworkReceiveReportsRequest(server string, id string, params *GetDatabaseNetworkReceiveReportsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/metrics/network-receive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseNetworkTransmitReportsRequest generates requests for GetDatabaseNetworkTransmitReports
func NewGetDatabaseNetworkTransmitReportsRequest(server string, id string, params *GetDatabaseNetworkTransmitReportsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/metrics/network-transmit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseSummaryReportsRequest generates requests for GetDatabaseSummaryReports
func NewGetDatabaseSummaryReportsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/metrics/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangePublicNetworkRequest generates requests for ChangePublicNetwork
func NewChangePublicNetworkRequest(server string, id string, status ChangePublicNetworkParamsStatus) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "status", runtime.ParamLocationPath, status)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/public-network/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResizeDatabaseRequest calls the generic ResizeDatabase builder with application/json body
func NewResizeDatabaseRequest(server string, id string, body ResizeDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResizeDatabaseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewResizeDatabaseRequestWithBody generates requests for ResizeDatabase with any type of body
func NewResizeDatabaseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/resize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDatabasesSettingsRequest calls the generic DatabasesSettings builder with application/json body
func NewDatabasesSettingsRequest(server string, id string, body DatabasesSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDatabasesSettingsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDatabasesSettingsRequestWithBody generates requests for DatabasesSettings with any type of body
func NewDatabasesSettingsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabaseEventsRequest generates requests for GetDatabaseEvents
func NewGetDatabaseEventsRequest(server string, name string, params *GetDatabaseEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetListDatabasesWithResponse request
	GetListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListDatabasesResp, error)

	// CreateDatabaseWithBodyWithResponse request with any body
	CreateDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResp, error)

	CreateDatabaseWithResponse(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResp, error)

	// DeleteDatabaseWithResponse request
	DeleteDatabaseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDatabaseResp, error)

	// GetDatabaseWithResponse request
	GetDatabaseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDatabaseResp, error)

	// TurnDatabaseWithBodyWithResponse request with any body
	TurnDatabaseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TurnDatabaseResp, error)

	TurnDatabaseWithResponse(ctx context.Context, id string, body TurnDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TurnDatabaseResp, error)

	// GetListBackupsWithResponse request
	GetListBackupsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetListBackupsResp, error)

	// CreateBackupWithResponse request
	CreateBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CreateBackupResp, error)

	// DownloadBackupWithResponse request
	DownloadBackupWithResponse(ctx context.Context, id string, name string, reqEditors ...RequestEditorFn) (*DownloadBackupResp, error)

	// ChangeControlPanelWithResponse request
	ChangeControlPanelWithResponse(ctx context.Context, id string, status ChangeControlPanelParamsStatus, reqEditors ...RequestEditorFn) (*ChangeControlPanelResp, error)

	// GetDatabaseCpuReportsWithResponse request
	GetDatabaseCpuReportsWithResponse(ctx context.Context, id string, params *GetDatabaseCpuReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseCpuReportsResp, error)

	// GetDatabaseMemoryReportsWithResponse request
	GetDatabaseMemoryReportsWithResponse(ctx context.Context, id string, params *GetDatabaseMemoryReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseMemoryReportsResp, error)

	// GetDatabaseNetworkReceiveReportsWithResponse request
	GetDatabaseNetworkReceiveReportsWithResponse(ctx context.Context, id string, params *GetDatabaseNetworkReceiveReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseNetworkReceiveReportsResp, error)

	// GetDatabaseNetworkTransmitReportsWithResponse request
	GetDatabaseNetworkTransmitReportsWithResponse(ctx context.Context, id string, params *GetDatabaseNetworkTransmitReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseNetworkTransmitReportsResp, error)

	// GetDatabaseSummaryReportsWithResponse request
	GetDatabaseSummaryReportsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDatabaseSummaryReportsResp, error)

	// ChangePublicNetworkWithResponse request
	ChangePublicNetworkWithResponse(ctx context.Context, id string, status ChangePublicNetworkParamsStatus, reqEditors ...RequestEditorFn) (*ChangePublicNetworkResp, error)

	// ResizeDatabaseWithBodyWithResponse request with any body
	ResizeDatabaseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeDatabaseResp, error)

	ResizeDatabaseWithResponse(ctx context.Context, id string, body ResizeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*ResizeDatabaseResp, error)

	// DatabasesSettingsWithBodyWithResponse request with any body
	DatabasesSettingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatabasesSettingsResp, error)

	DatabasesSettingsWithResponse(ctx context.Context, id string, body DatabasesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*DatabasesSettingsResp, error)

	// GetDatabaseEventsWithResponse request
	GetDatabaseEventsWithResponse(ctx context.Context, name string, params *GetDatabaseEventsParams, reqEditors ...RequestEditorFn) (*GetDatabaseEventsResp, error)
}

type GetListDatabasesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBsDetails
}

// Status returns HTTPResponse.Status
func (r GetListDatabasesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListDatabasesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DatabaseID *string `json:"databaseID,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBDetails
}

// Status returns HTTPResponse.Status
func (r GetDatabaseResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TurnDatabaseResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TurnDatabaseResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TurnDatabaseResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListBackupsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Backups *[]struct {
			Etag         *string  `json:"etag,omitempty"`
			LastModified *string  `json:"lastModified,omitempty"`
			Name         *string  `json:"name,omitempty"`
			Size         *float32 `json:"size,omitempty"`
		} `json:"backups,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListBackupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListBackupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackupResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateBackupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadBackupResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Link *string `json:"link,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DownloadBackupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadBackupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeControlPanelResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ControlPanelID *string `json:"controlPanelID,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ChangeControlPanelResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeControlPanelResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseCpuReportsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reports
}

// Status returns HTTPResponse.Status
func (r GetDatabaseCpuReportsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseCpuReportsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseMemoryReportsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reports
}

// Status returns HTTPResponse.Status
func (r GetDatabaseMemoryReportsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseMemoryReportsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseNetworkReceiveReportsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reports
}

// Status returns HTTPResponse.Status
func (r GetDatabaseNetworkReceiveReportsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseNetworkReceiveReportsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseNetworkTransmitReportsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reports
}

// Status returns HTTPResponse.Status
func (r GetDatabaseNetworkTransmitReportsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseNetworkTransmitReportsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseSummaryReportsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CpuUsage *[]struct {
			Applet *string                                              `json:"applet,omitempty"`
			Value  *[]GetDatabaseSummaryReports_200_CpuUsage_Value_Item `json:"value,omitempty"`
		} `json:"cpuUsage,omitempty"`
		DisksUsage *[]struct {
			ReportedAt *string `json:"reportedAt,omitempty"`
			Size       *string `json:"size,omitempty"`
			Usage      *string `json:"usage,omitempty"`
		} `json:"disksUsage,omitempty"`
		MemoryUsage *[]struct {
			Applet *string                                                 `json:"applet,omitempty"`
			Value  *[]GetDatabaseSummaryReports_200_MemoryUsage_Value_Item `json:"value,omitempty"`
		} `json:"memoryUsage,omitempty"`
	}
}
type GetDatabaseSummaryReports200CpuUsageValue0 = float32
type GetDatabaseSummaryReports200CpuUsageValue1 = string
type GetDatabaseSummaryReports_200_CpuUsage_Value_Item struct {
	union json.RawMessage
}
type GetDatabaseSummaryReports200MemoryUsageValue0 = float32
type GetDatabaseSummaryReports200MemoryUsageValue1 = string
type GetDatabaseSummaryReports_200_MemoryUsage_Value_Item struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDatabaseSummaryReportsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseSummaryReportsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePublicNetworkResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangePublicNetworkResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePublicNetworkResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeDatabaseResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResizeDatabaseResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeDatabaseResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatabasesSettingsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DatabasesSettingsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatabasesSettingsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseEventsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			MetaData *map[string]interface{} `json:"metaData,omitempty"`
			Values   *[][]string             `json:"values,omitempty"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseEventsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseEventsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetListDatabasesWithResponse request returning *GetListDatabasesResp
func (c *ClientWithResponses) GetListDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListDatabasesResp, error) {
	rsp, err := c.GetListDatabases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListDatabasesResp(rsp)
}

// CreateDatabaseWithBodyWithResponse request with arbitrary body returning *CreateDatabaseResp
func (c *ClientWithResponses) CreateDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResp, error) {
	rsp, err := c.CreateDatabaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResp(rsp)
}

func (c *ClientWithResponses) CreateDatabaseWithResponse(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResp, error) {
	rsp, err := c.CreateDatabase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResp(rsp)
}

// DeleteDatabaseWithResponse request returning *DeleteDatabaseResp
func (c *ClientWithResponses) DeleteDatabaseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDatabaseResp, error) {
	rsp, err := c.DeleteDatabase(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseResp(rsp)
}

// GetDatabaseWithResponse request returning *GetDatabaseResp
func (c *ClientWithResponses) GetDatabaseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDatabaseResp, error) {
	rsp, err := c.GetDatabase(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseResp(rsp)
}

// TurnDatabaseWithBodyWithResponse request with arbitrary body returning *TurnDatabaseResp
func (c *ClientWithResponses) TurnDatabaseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TurnDatabaseResp, error) {
	rsp, err := c.TurnDatabaseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTurnDatabaseResp(rsp)
}

func (c *ClientWithResponses) TurnDatabaseWithResponse(ctx context.Context, id string, body TurnDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*TurnDatabaseResp, error) {
	rsp, err := c.TurnDatabase(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTurnDatabaseResp(rsp)
}

// GetListBackupsWithResponse request returning *GetListBackupsResp
func (c *ClientWithResponses) GetListBackupsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetListBackupsResp, error) {
	rsp, err := c.GetListBackups(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListBackupsResp(rsp)
}

// CreateBackupWithResponse request returning *CreateBackupResp
func (c *ClientWithResponses) CreateBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CreateBackupResp, error) {
	rsp, err := c.CreateBackup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackupResp(rsp)
}

// DownloadBackupWithResponse request returning *DownloadBackupResp
func (c *ClientWithResponses) DownloadBackupWithResponse(ctx context.Context, id string, name string, reqEditors ...RequestEditorFn) (*DownloadBackupResp, error) {
	rsp, err := c.DownloadBackup(ctx, id, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadBackupResp(rsp)
}

// ChangeControlPanelWithResponse request returning *ChangeControlPanelResp
func (c *ClientWithResponses) ChangeControlPanelWithResponse(ctx context.Context, id string, status ChangeControlPanelParamsStatus, reqEditors ...RequestEditorFn) (*ChangeControlPanelResp, error) {
	rsp, err := c.ChangeControlPanel(ctx, id, status, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeControlPanelResp(rsp)
}

// GetDatabaseCpuReportsWithResponse request returning *GetDatabaseCpuReportsResp
func (c *ClientWithResponses) GetDatabaseCpuReportsWithResponse(ctx context.Context, id string, params *GetDatabaseCpuReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseCpuReportsResp, error) {
	rsp, err := c.GetDatabaseCpuReports(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseCpuReportsResp(rsp)
}

// GetDatabaseMemoryReportsWithResponse request returning *GetDatabaseMemoryReportsResp
func (c *ClientWithResponses) GetDatabaseMemoryReportsWithResponse(ctx context.Context, id string, params *GetDatabaseMemoryReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseMemoryReportsResp, error) {
	rsp, err := c.GetDatabaseMemoryReports(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseMemoryReportsResp(rsp)
}

// GetDatabaseNetworkReceiveReportsWithResponse request returning *GetDatabaseNetworkReceiveReportsResp
func (c *ClientWithResponses) GetDatabaseNetworkReceiveReportsWithResponse(ctx context.Context, id string, params *GetDatabaseNetworkReceiveReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseNetworkReceiveReportsResp, error) {
	rsp, err := c.GetDatabaseNetworkReceiveReports(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseNetworkReceiveReportsResp(rsp)
}

// GetDatabaseNetworkTransmitReportsWithResponse request returning *GetDatabaseNetworkTransmitReportsResp
func (c *ClientWithResponses) GetDatabaseNetworkTransmitReportsWithResponse(ctx context.Context, id string, params *GetDatabaseNetworkTransmitReportsParams, reqEditors ...RequestEditorFn) (*GetDatabaseNetworkTransmitReportsResp, error) {
	rsp, err := c.GetDatabaseNetworkTransmitReports(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseNetworkTransmitReportsResp(rsp)
}

// GetDatabaseSummaryReportsWithResponse request returning *GetDatabaseSummaryReportsResp
func (c *ClientWithResponses) GetDatabaseSummaryReportsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDatabaseSummaryReportsResp, error) {
	rsp, err := c.GetDatabaseSummaryReports(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseSummaryReportsResp(rsp)
}

// ChangePublicNetworkWithResponse request returning *ChangePublicNetworkResp
func (c *ClientWithResponses) ChangePublicNetworkWithResponse(ctx context.Context, id string, status ChangePublicNetworkParamsStatus, reqEditors ...RequestEditorFn) (*ChangePublicNetworkResp, error) {
	rsp, err := c.ChangePublicNetwork(ctx, id, status, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePublicNetworkResp(rsp)
}

// ResizeDatabaseWithBodyWithResponse request with arbitrary body returning *ResizeDatabaseResp
func (c *ClientWithResponses) ResizeDatabaseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeDatabaseResp, error) {
	rsp, err := c.ResizeDatabaseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeDatabaseResp(rsp)
}

func (c *ClientWithResponses) ResizeDatabaseWithResponse(ctx context.Context, id string, body ResizeDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*ResizeDatabaseResp, error) {
	rsp, err := c.ResizeDatabase(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeDatabaseResp(rsp)
}

// DatabasesSettingsWithBodyWithResponse request with arbitrary body returning *DatabasesSettingsResp
func (c *ClientWithResponses) DatabasesSettingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatabasesSettingsResp, error) {
	rsp, err := c.DatabasesSettingsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatabasesSettingsResp(rsp)
}

func (c *ClientWithResponses) DatabasesSettingsWithResponse(ctx context.Context, id string, body DatabasesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*DatabasesSettingsResp, error) {
	rsp, err := c.DatabasesSettings(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatabasesSettingsResp(rsp)
}

// GetDatabaseEventsWithResponse request returning *GetDatabaseEventsResp
func (c *ClientWithResponses) GetDatabaseEventsWithResponse(ctx context.Context, name string, params *GetDatabaseEventsParams, reqEditors ...RequestEditorFn) (*GetDatabaseEventsResp, error) {
	rsp, err := c.GetDatabaseEvents(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseEventsResp(rsp)
}

// ParseGetListDatabasesResp parses an HTTP response from a GetListDatabasesWithResponse call
func ParseGetListDatabasesResp(rsp *http.Response) (*GetListDatabasesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListDatabasesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBsDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseResp parses an HTTP response from a CreateDatabaseWithResponse call
func ParseCreateDatabaseResp(rsp *http.Response) (*CreateDatabaseResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DatabaseID *string `json:"databaseID,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseResp parses an HTTP response from a DeleteDatabaseWithResponse call
func ParseDeleteDatabaseResp(rsp *http.Response) (*DeleteDatabaseResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDatabaseResp parses an HTTP response from a GetDatabaseWithResponse call
func ParseGetDatabaseResp(rsp *http.Response) (*GetDatabaseResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTurnDatabaseResp parses an HTTP response from a TurnDatabaseWithResponse call
func ParseTurnDatabaseResp(rsp *http.Response) (*TurnDatabaseResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TurnDatabaseResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListBackupsResp parses an HTTP response from a GetListBackupsWithResponse call
func ParseGetListBackupsResp(rsp *http.Response) (*GetListBackupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListBackupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Backups *[]struct {
				Etag         *string  `json:"etag,omitempty"`
				LastModified *string  `json:"lastModified,omitempty"`
				Name         *string  `json:"name,omitempty"`
				Size         *float32 `json:"size,omitempty"`
			} `json:"backups,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBackupResp parses an HTTP response from a CreateBackupWithResponse call
func ParseCreateBackupResp(rsp *http.Response) (*CreateBackupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadBackupResp parses an HTTP response from a DownloadBackupWithResponse call
func ParseDownloadBackupResp(rsp *http.Response) (*DownloadBackupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadBackupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Link *string `json:"link,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeControlPanelResp parses an HTTP response from a ChangeControlPanelWithResponse call
func ParseChangeControlPanelResp(rsp *http.Response) (*ChangeControlPanelResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeControlPanelResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ControlPanelID *string `json:"controlPanelID,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseCpuReportsResp parses an HTTP response from a GetDatabaseCpuReportsWithResponse call
func ParseGetDatabaseCpuReportsResp(rsp *http.Response) (*GetDatabaseCpuReportsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseCpuReportsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseMemoryReportsResp parses an HTTP response from a GetDatabaseMemoryReportsWithResponse call
func ParseGetDatabaseMemoryReportsResp(rsp *http.Response) (*GetDatabaseMemoryReportsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseMemoryReportsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseNetworkReceiveReportsResp parses an HTTP response from a GetDatabaseNetworkReceiveReportsWithResponse call
func ParseGetDatabaseNetworkReceiveReportsResp(rsp *http.Response) (*GetDatabaseNetworkReceiveReportsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseNetworkReceiveReportsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseNetworkTransmitReportsResp parses an HTTP response from a GetDatabaseNetworkTransmitReportsWithResponse call
func ParseGetDatabaseNetworkTransmitReportsResp(rsp *http.Response) (*GetDatabaseNetworkTransmitReportsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseNetworkTransmitReportsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseSummaryReportsResp parses an HTTP response from a GetDatabaseSummaryReportsWithResponse call
func ParseGetDatabaseSummaryReportsResp(rsp *http.Response) (*GetDatabaseSummaryReportsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseSummaryReportsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CpuUsage *[]struct {
				Applet *string                                              `json:"applet,omitempty"`
				Value  *[]GetDatabaseSummaryReports_200_CpuUsage_Value_Item `json:"value,omitempty"`
			} `json:"cpuUsage,omitempty"`
			DisksUsage *[]struct {
				ReportedAt *string `json:"reportedAt,omitempty"`
				Size       *string `json:"size,omitempty"`
				Usage      *string `json:"usage,omitempty"`
			} `json:"disksUsage,omitempty"`
			MemoryUsage *[]struct {
				Applet *string                                                 `json:"applet,omitempty"`
				Value  *[]GetDatabaseSummaryReports_200_MemoryUsage_Value_Item `json:"value,omitempty"`
			} `json:"memoryUsage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangePublicNetworkResp parses an HTTP response from a ChangePublicNetworkWithResponse call
func ParseChangePublicNetworkResp(rsp *http.Response) (*ChangePublicNetworkResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePublicNetworkResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResizeDatabaseResp parses an HTTP response from a ResizeDatabaseWithResponse call
func ParseResizeDatabaseResp(rsp *http.Response) (*ResizeDatabaseResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeDatabaseResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDatabasesSettingsResp parses an HTTP response from a DatabasesSettingsWithResponse call
func ParseDatabasesSettingsResp(rsp *http.Response) (*DatabasesSettingsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatabasesSettingsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDatabaseEventsResp parses an HTTP response from a GetDatabaseEventsWithResponse call
func ParseGetDatabaseEventsResp(rsp *http.Response) (*GetDatabaseEventsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseEventsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				MetaData *map[string]interface{} `json:"metaData,omitempty"`
				Values   *[][]string             `json:"values,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX3PbOA7/KhzePfpP0nbn7vx0Tdzr5K7dzcS9p2ymhSXYZiORKknFcTP57jskJUu2",
	"SFt2kjbO9CmOBAEk8AMIgOQdjUSaCY5cKzq4oyqaYQr256lE0NiNQcMYFNpnmRQZSs3cfzOhNIcUze8Y",
	"VSRZppngdEA/zZCUb4mYkCUTomegyULkZA5cEy1IZMXQDtWLDOmAKi0Zn9L7DhWWm0eu0sBjSATHC8wS",
	"FsEItXlecBgLkSBwen+/ZCrGXzHShmmWAD8b+kfs3u093iwfJyz6HfVcyOuAhDrJjoKW0yqf+ASYN3tP",
	"4Aalsqx8nIuXezL3mWJ40o1RA0s8Ji5FNN8MT85i/wid6fQMlwP0TdKNMP4M2s/FvjcT1SxFpSHN2nCN",
	"x78HHWHpBGPfl+2daNsYZiKXyeJcsijIzBCQzFCEGfI8HaM0DFlA0Tln3/K2+mZco+SQnAsZ0HhJQTIh",
	"dZilIZu6gaWoYQgamujIJLsBjUEnPOMxi0CjImxVDmGKCE6AFBwIL1j4/C8UgNrKyo3vAKnYEOn4EIXa",
	"I9HnPVzEHu/4zFo7B7EcAogMo7Elm31iLzkbeuNqEDkWMA6vZCLk6rgiwTlGltqHoS3RugVQLIONOJFC",
	"6M8ZKDUXMmAXQ0JKksYkfOpQESQBB7evWnmQ0qBzFeBi37Xx7e3r0DYOuTKuH4p+5VsCSomImbhN5kzP",
	"trLduJItLVlS+RiIJE9xxL6HNM2+N+ZH3EcefTedwb8equ0Lov2HaUzVoSyNj7fAPdv1aN/A9gNC0AuK",
	"Fj6fKR6AlLAIeFXpOF2FWjM+9ThOsNKIEoZcv+ORiM0Qqhqj5jRumfnEUhR5vQyp8qgUbt8miZhjfA7R",
	"NQaJTpcrlgqR/FcwXkalxnuO+iSfTFB+QD7VMy+NwgQj/YGlzD8MNQOJsWPjG0XYCHdt7HWBxqk8mkYe",
	"e8cjUeWJ3hD0IMuSFZXWgjgk+VrAXP4QHP+Y0MFlU2SD0VUDZ21wt43C2iLKJdOLkSm63UC/zj1B6Z0J",
	"SNY5tLhGXi2BX04QJMoB+UIyiRN22yHYm/bIn9S9IDCOYjx+9frNb3/SHiF/oyb+0QGdIcQoaYe6wEzf",
	"5nomJPsOq+kSZOx/aEZ/36F466LiUESeSPAfxmMick1SIZHA2PwcngCMaIfmMjEitc4G/X7CQEKPufqC",
	"T4T1MsE1RHbimAJLbPCZiH/XaVfFfQQOUzSVp6xVo7lifErMs7fnZ2YWKFP1x2SE8sbWRNTMXzNtAiIt",
	"R7dMFehx76h35BoPyCFjdEBf9456x7RDM9AzO+v+zXF/ZSme+jL/KWoCSbJeKJt0hog5V9TKkFbbZsmm",
	"71F/YEovYxW1wM8EL6S8OjoqFYVcl7A3qwMTvP9VuVTHNW/Mr79LnJj59qvuTr9o7fTraYa17OrYR3kU",
	"oVKTPCHLMRqlvHFDWCU+gZhI/Jaj0o7muEnzkSlrF8j1DLkuBu0cIE9TkAungFWNGUuBidWXVQSnV7Ya",
	"8FUnLnUhUK2RWzTuulvDarEppnEi4sWjqbrRQrP6NpKYxJgOtMzx/oGm9qeJLhvZGpB/ovkN+b+a5KeC",
	"TxJWBsglPk7X7evHR4fediMR4xR5txhYdyziRbeIcw02yspZ8er+HYvv3cAS1J6MxT3fAWtD+0ENaxlI",
	"SFHbFfbyzoVkE2KqgMxiug6UTs3o64a98oPoJ5r2TZN8WHUMNJmInMdrRh6uKzYYBMJRt7VR3qP+CRZ5",
	"pAj+LAL4vmZ+v2KngI29XtkHlx33l1WNfzXIxNyYnRMhSfF7MtkBG59yyZ8cHPstN2s7IaUemll6NZrL",
	"guyqRfg/ti2ouv6O6k8mE9py/TowTJ5vQcx+y43TewDLY4iu82x7ElnQtUwhTwquzzCkrUK3Nv1AZYca",
	"/CV3Akp/FDGbMIy9BGW7qdk79ZfOe9VvBxp4K0TVMF2iJpxgu292TrAd418pT8gkJ+tq9RplYwDp3xkF",
	"3vdjMeeJgDi8LJYUBAoIbE1ciw9CVvT0TmMiJqt1edlzeJC1O5s2Vq24cTlGjzD75+eFuoTx60Mox/bK",
	"2dcxtQOAjTqlSLoZcEz6d66TfB/GbzQDPrUbe9VnZf95WzSyn566L8/Nh08RkzpeJkX3fBMj5HlqNIYc",
	"xomBasyU/XXVeWJsRjWVHEbToCVKd+wvhKG1U4GSopYsUv0oyzcmdlGWE+l64fUTNTsUradZXjbTW8Tl",
	"lVD59JFZMR5V8mqTLUV+y1Euai5i6NuIXWZsT1lfl3p9zkiPBSoLd7xlSqueJ9ULYKyG53Ki29CcYirk",
	"YiOgHckDMf3RMjkUWK9O+Reyfxyyw2DbA9zF7nlXYoTsBjeifI32gXAvdv4vHLNDgX1AB7/w/+Pw3wKG",
	"D3AELYGr4nzAVk8oiR/HFT4V3A7NF9a18MsZfrwzbELiHt6wFLLBCQqaB2J/5Lg8C8w/cnGZ5f9XMMUH",
	"HN95vEM725u8tuy+VtuG7KyN8VvdpsdcP+ta8N35XFuHuoznkJR5UH2DFmFmg6/vEF3cic1uEbNWe16g",
	"o1mw6bV61HOnrtf5yjHTF9b2eqGNKK+5d+pESSwDkb+Z6t7vsKFzYT84iG1xE8Z9FwLrJ7WbQbi+Y17Q",
	"+bfMX+IG+MU6HPbb8S5QF8Dkyglsf7grSXY5XlUKGZXsnxc2Nx7laZ5Of7EQGzVN2zqiuS1OvCnvKQdT",
	"ckfSuJoj5hxjMl5YGG1Kxt85ETsk4Zvz7523HhtV52gm5uW0jJyYCE4UgoxmpKwvvcWmJaE7yVIapK6u",
	"99AOxVtIswTp4PgfR2+OXv3z9fFvAXHmU7qplm1IQx7vJwt5TJ+yam6eqd2QdNcvozZy4k1XEAIXZB50",
	"yaC+htlxX72wNNzv325W5X0K67D2JsXllcGCQnlT+nF1GUEN+n3IWI9J4L3qqsHVMiQ1rmHcoFzomZ2Y",
	"veBgy+/6mf0CntWjJuaLPXGCPM4Ec6Gm+KzcLm9+dFHVHFYmZFn12bKNc3X/VwAAAP//LwJ6j85BAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
