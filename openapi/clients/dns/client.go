// Package dns provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package dns

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// AllDnsRecordResponse defines model for All-dns-record-response.
type AllDnsRecordResponse struct {
	Data *[]DnsRecordId `json:"data,omitempty"`

	// Status success
	Status *string `json:"status,omitempty"`
}

// CreateZone defines model for Create-zone.
type CreateZone struct {
	Data   *Zone   `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
}

// DnsRecord defines model for Dns-record.
type DnsRecord struct {
	// Contents Array of content of dns record, change base on type of dns record
	Contents *[]map[string]interface{} `json:"contents,omitempty"`

	// Name The name of dns record, "@" for zone name(root level), "*" for wild card and any valid value with RFC 1123
	Name *string `json:"name,omitempty"`

	// Ttl The ttl of dns record, is not required, valid values: [120, 180, 300, 600, 900, 1800, 3600, 7200, 18000, 43200, 86400, 172800, 432000]
	Ttl *float32 `json:"ttl,omitempty"`

	// Type The type of dns record, valid values: [A, AAAA, TXT, CNAME, ALIAS, MX, SRV, SPF, PTR]
	Type *string `json:"type,omitempty"`
}

// DnsRecordId defines model for Dns-record-id.
type DnsRecordId struct {
	// Contents Array of content of dns record, change base on type of dns record
	Contents *[]map[string]interface{} `json:"contents,omitempty"`

	// Id The id of dns record which need in PUT, DELETE and GET method
	Id *string `json:"id,omitempty"`

	// Name The name of dns record, "@" for zone name(root level), "*" for wild card and any valid value with RFC 1123
	Name *string `json:"name,omitempty"`

	// Ttl The ttl of dns record, is not required, valid values: [120, 180, 300, 600, 900, 1800, 3600, 7200, 18000, 43200, 86400, 172800, 432000]
	Ttl *float32 `json:"ttl,omitempty"`

	// Type The type of dns record, valid values: [A, AAAA, TXT, CNAME, ALIAS, MX, SRV, CAA]
	Type *string `json:"type,omitempty"`
}

// DnsRecordResponse defines model for Dns-record-response.
type DnsRecordResponse struct {
	Data *DnsRecordId `json:"data,omitempty"`

	// Status success
	Status *string `json:"status,omitempty"`
}

// Submitted defines model for Submitted.
type Submitted struct {
	// Data Your request has been submitted.
	Data *string `json:"data,omitempty"`

	// Status succes
	Status *string `json:"status,omitempty"`
}

// Zone defines model for Zone.
type Zone struct {
	// CreatedAt Time when zone was created
	CreatedAt          *string   `json:"createdAt,omitempty"`
	CurrentNameServers *[]string `json:"currentNameServers,omitempty"`
	Id                 *string   `json:"id,omitempty"`

	// LastCheckAt Last time when zones nameservers was checked
	LastCheckAt *string `json:"lastCheckAt,omitempty"`

	// Name The name of the zone, “liara.ir”, max length: 253, pattern: ^([a-zA-Z0-9][\-a-zA-Z0-9]*\.)+[\-a-zA-Z0-9]{2,20}$
	Name        *string   `json:"name,omitempty"`
	NameServers *[]string `json:"nameServers,omitempty"`

	// Status The status of the zone, valid values: [CREATING, PENDING, ACTIVE, DELETING]
	Status *string `json:"status,omitempty"`
}

// Zones defines model for Zones.
type Zones struct {
	Data   *[]Zone `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
}

// CreateZoneJSONBody defines parameters for CreateZone.
type CreateZoneJSONBody struct {
	Name string `json:"name"`
}

// CreateZoneJSONRequestBody defines body for CreateZone for application/json ContentType.
type CreateZoneJSONRequestBody CreateZoneJSONBody

// CreateDnsRecordJSONRequestBody defines body for CreateDnsRecord for application/json ContentType.
type CreateDnsRecordJSONRequestBody = DnsRecord

// EditDnsRecordJSONRequestBody defines body for EditDnsRecord for application/json ContentType.
type EditDnsRecordJSONRequestBody = DnsRecord

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetListZones request
	GetListZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateZoneWithBody request with any body
	CreateZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateZone(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteZone request
	DeleteZone(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZone request
	GetZone(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckNameServer request
	CheckNameServer(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListDnsRecords request
	GetListDnsRecords(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDnsRecordWithBody request with any body
	CreateDnsRecordWithBody(ctx context.Context, zone string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDnsRecord(ctx context.Context, zone string, body CreateDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDnsRecord request
	DeleteDnsRecord(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDnsRecord request
	GetDnsRecord(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditDnsRecordWithBody request with any body
	EditDnsRecordWithBody(ctx context.Context, zone string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditDnsRecord(ctx context.Context, zone string, id string, body EditDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetListZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZone(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZone(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZoneRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZone(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckNameServer(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckNameServerRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListDnsRecords(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListDnsRecordsRequest(c.Server, zone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDnsRecordWithBody(ctx context.Context, zone string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDnsRecordRequestWithBody(c.Server, zone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDnsRecord(ctx context.Context, zone string, body CreateDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDnsRecordRequest(c.Server, zone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDnsRecord(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDnsRecordRequest(c.Server, zone, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDnsRecord(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDnsRecordRequest(c.Server, zone, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditDnsRecordWithBody(ctx context.Context, zone string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditDnsRecordRequestWithBody(c.Server, zone, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditDnsRecord(ctx context.Context, zone string, id string, body EditDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditDnsRecordRequest(c.Server, zone, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetListZonesRequest generates requests for GetListZones
func NewGetListZonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateZoneRequest calls the generic CreateZone builder with application/json body
func NewCreateZoneRequest(server string, body CreateZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateZoneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateZoneRequestWithBody generates requests for CreateZone with any type of body
func NewCreateZoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteZoneRequest generates requests for DeleteZone
func NewDeleteZoneRequest(server string, zone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneRequest generates requests for GetZone
func NewGetZoneRequest(server string, zone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckNameServerRequest generates requests for CheckNameServer
func NewCheckNameServerRequest(server string, zone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/check", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListDnsRecordsRequest generates requests for GetListDnsRecords
func NewGetListDnsRecordsRequest(server string, zone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/dns-records", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDnsRecordRequest calls the generic CreateDnsRecord builder with application/json body
func NewCreateDnsRecordRequest(server string, zone string, body CreateDnsRecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDnsRecordRequestWithBody(server, zone, "application/json", bodyReader)
}

// NewCreateDnsRecordRequestWithBody generates requests for CreateDnsRecord with any type of body
func NewCreateDnsRecordRequestWithBody(server string, zone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/dns-records", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDnsRecordRequest generates requests for DeleteDnsRecord
func NewDeleteDnsRecordRequest(server string, zone string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/dns-records/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDnsRecordRequest generates requests for GetDnsRecord
func NewGetDnsRecordRequest(server string, zone string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/dns-records/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditDnsRecordRequest calls the generic EditDnsRecord builder with application/json body
func NewEditDnsRecordRequest(server string, zone string, id string, body EditDnsRecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditDnsRecordRequestWithBody(server, zone, id, "application/json", bodyReader)
}

// NewEditDnsRecordRequestWithBody generates requests for EditDnsRecord with any type of body
func NewEditDnsRecordRequestWithBody(server string, zone string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zone", runtime.ParamLocationPath, zone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/zones/%s/dns-records/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetListZonesWithResponse request
	GetListZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListZonesResp, error)

	// CreateZoneWithBodyWithResponse request with any body
	CreateZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResp, error)

	CreateZoneWithResponse(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResp, error)

	// DeleteZoneWithResponse request
	DeleteZoneWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*DeleteZoneResp, error)

	// GetZoneWithResponse request
	GetZoneWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*GetZoneResp, error)

	// CheckNameServerWithResponse request
	CheckNameServerWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*CheckNameServerResp, error)

	// GetListDnsRecordsWithResponse request
	GetListDnsRecordsWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*GetListDnsRecordsResp, error)

	// CreateDnsRecordWithBodyWithResponse request with any body
	CreateDnsRecordWithBodyWithResponse(ctx context.Context, zone string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDnsRecordResp, error)

	CreateDnsRecordWithResponse(ctx context.Context, zone string, body CreateDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDnsRecordResp, error)

	// DeleteDnsRecordWithResponse request
	DeleteDnsRecordWithResponse(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*DeleteDnsRecordResp, error)

	// GetDnsRecordWithResponse request
	GetDnsRecordWithResponse(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*GetDnsRecordResp, error)

	// EditDnsRecordWithBodyWithResponse request with any body
	EditDnsRecordWithBodyWithResponse(ctx context.Context, zone string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditDnsRecordResp, error)

	EditDnsRecordWithResponse(ctx context.Context, zone string, id string, body EditDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*EditDnsRecordResp, error)
}

type GetListZonesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zones
}

// Status returns HTTPResponse.Status
func (r GetListZonesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListZonesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateZoneResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateZone
}

// Status returns HTTPResponse.Status
func (r CreateZoneResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateZoneResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteZoneResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Submitted
}

// Status returns HTTPResponse.Status
func (r DeleteZoneResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteZoneResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateZone
}

// Status returns HTTPResponse.Status
func (r GetZoneResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckNameServerResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Submitted
}

// Status returns HTTPResponse.Status
func (r CheckNameServerResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckNameServerResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListDnsRecordsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllDnsRecordResponse
}

// Status returns HTTPResponse.Status
func (r GetListDnsRecordsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListDnsRecordsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDnsRecordResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DnsRecordResponse
}

// Status returns HTTPResponse.Status
func (r CreateDnsRecordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDnsRecordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDnsRecordResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDnsRecordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDnsRecordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDnsRecordResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResponse
}

// Status returns HTTPResponse.Status
func (r GetDnsRecordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDnsRecordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditDnsRecordResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResponse
}

// Status returns HTTPResponse.Status
func (r EditDnsRecordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditDnsRecordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetListZonesWithResponse request returning *GetListZonesResp
func (c *ClientWithResponses) GetListZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListZonesResp, error) {
	rsp, err := c.GetListZones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListZonesResp(rsp)
}

// CreateZoneWithBodyWithResponse request with arbitrary body returning *CreateZoneResp
func (c *ClientWithResponses) CreateZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResp, error) {
	rsp, err := c.CreateZoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResp(rsp)
}

func (c *ClientWithResponses) CreateZoneWithResponse(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResp, error) {
	rsp, err := c.CreateZone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResp(rsp)
}

// DeleteZoneWithResponse request returning *DeleteZoneResp
func (c *ClientWithResponses) DeleteZoneWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*DeleteZoneResp, error) {
	rsp, err := c.DeleteZone(ctx, zone, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZoneResp(rsp)
}

// GetZoneWithResponse request returning *GetZoneResp
func (c *ClientWithResponses) GetZoneWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*GetZoneResp, error) {
	rsp, err := c.GetZone(ctx, zone, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneResp(rsp)
}

// CheckNameServerWithResponse request returning *CheckNameServerResp
func (c *ClientWithResponses) CheckNameServerWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*CheckNameServerResp, error) {
	rsp, err := c.CheckNameServer(ctx, zone, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckNameServerResp(rsp)
}

// GetListDnsRecordsWithResponse request returning *GetListDnsRecordsResp
func (c *ClientWithResponses) GetListDnsRecordsWithResponse(ctx context.Context, zone string, reqEditors ...RequestEditorFn) (*GetListDnsRecordsResp, error) {
	rsp, err := c.GetListDnsRecords(ctx, zone, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListDnsRecordsResp(rsp)
}

// CreateDnsRecordWithBodyWithResponse request with arbitrary body returning *CreateDnsRecordResp
func (c *ClientWithResponses) CreateDnsRecordWithBodyWithResponse(ctx context.Context, zone string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDnsRecordResp, error) {
	rsp, err := c.CreateDnsRecordWithBody(ctx, zone, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDnsRecordResp(rsp)
}

func (c *ClientWithResponses) CreateDnsRecordWithResponse(ctx context.Context, zone string, body CreateDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDnsRecordResp, error) {
	rsp, err := c.CreateDnsRecord(ctx, zone, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDnsRecordResp(rsp)
}

// DeleteDnsRecordWithResponse request returning *DeleteDnsRecordResp
func (c *ClientWithResponses) DeleteDnsRecordWithResponse(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*DeleteDnsRecordResp, error) {
	rsp, err := c.DeleteDnsRecord(ctx, zone, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDnsRecordResp(rsp)
}

// GetDnsRecordWithResponse request returning *GetDnsRecordResp
func (c *ClientWithResponses) GetDnsRecordWithResponse(ctx context.Context, zone string, id string, reqEditors ...RequestEditorFn) (*GetDnsRecordResp, error) {
	rsp, err := c.GetDnsRecord(ctx, zone, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDnsRecordResp(rsp)
}

// EditDnsRecordWithBodyWithResponse request with arbitrary body returning *EditDnsRecordResp
func (c *ClientWithResponses) EditDnsRecordWithBodyWithResponse(ctx context.Context, zone string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditDnsRecordResp, error) {
	rsp, err := c.EditDnsRecordWithBody(ctx, zone, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditDnsRecordResp(rsp)
}

func (c *ClientWithResponses) EditDnsRecordWithResponse(ctx context.Context, zone string, id string, body EditDnsRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*EditDnsRecordResp, error) {
	rsp, err := c.EditDnsRecord(ctx, zone, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditDnsRecordResp(rsp)
}

// ParseGetListZonesResp parses an HTTP response from a GetListZonesWithResponse call
func ParseGetListZonesResp(rsp *http.Response) (*GetListZonesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListZonesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateZoneResp parses an HTTP response from a CreateZoneWithResponse call
func ParseCreateZoneResp(rsp *http.Response) (*CreateZoneResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateZoneResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteZoneResp parses an HTTP response from a DeleteZoneWithResponse call
func ParseDeleteZoneResp(rsp *http.Response) (*DeleteZoneResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteZoneResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Submitted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZoneResp parses an HTTP response from a GetZoneWithResponse call
func ParseGetZoneResp(rsp *http.Response) (*GetZoneResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckNameServerResp parses an HTTP response from a CheckNameServerWithResponse call
func ParseCheckNameServerResp(rsp *http.Response) (*CheckNameServerResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckNameServerResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Submitted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetListDnsRecordsResp parses an HTTP response from a GetListDnsRecordsWithResponse call
func ParseGetListDnsRecordsResp(rsp *http.Response) (*GetListDnsRecordsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListDnsRecordsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllDnsRecordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDnsRecordResp parses an HTTP response from a CreateDnsRecordWithResponse call
func ParseCreateDnsRecordResp(rsp *http.Response) (*CreateDnsRecordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDnsRecordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DnsRecordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDnsRecordResp parses an HTTP response from a DeleteDnsRecordWithResponse call
func ParseDeleteDnsRecordResp(rsp *http.Response) (*DeleteDnsRecordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDnsRecordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDnsRecordResp parses an HTTP response from a GetDnsRecordWithResponse call
func ParseGetDnsRecordResp(rsp *http.Response) (*GetDnsRecordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDnsRecordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditDnsRecordResp parses an HTTP response from a EditDnsRecordWithResponse call
func ParseEditDnsRecordResp(rsp *http.Response) (*EditDnsRecordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditDnsRecordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
