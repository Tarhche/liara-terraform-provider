// Package object_storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package object_storage

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// Bucket defines model for Bucket.
type Bucket struct {
	CreatedAt  *string `json:"createdAt,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Plan       *string `json:"plan,omitempty"`
	Status     *string `json:"status,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

// CreateBucket defines model for Create-Bucket.
type CreateBucket struct {
	Name       *string `json:"name,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Plan       *string `json:"plan,omitempty"`
}

// CreateFolder defines model for Create-Folder.
type CreateFolder struct {
	Path *string `json:"path,omitempty"`
}

// CreateKey defines model for Create-Key.
type CreateKey struct {
	Buckets     *[]map[string]interface{} `json:"buckets,omitempty"`
	Description *string                   `json:"description,omitempty"`
}

// Key defines model for Key.
type Key struct {
	AccessKey *string `json:"accessKey,omitempty"`
	Buckets   *[]struct {
		CreatedAt  *string `json:"createdAt,omitempty"`
		Id         *string `json:"id,omitempty"`
		Name       *string `json:"name,omitempty"`
		Permission *string `json:"permission,omitempty"`
		Plan       *string `json:"plan,omitempty"`
		Status     *string `json:"status,omitempty"`
		UpdatedAt  *string `json:"updatedAt,omitempty"`
	} `json:"buckets,omitempty"`
	CreatedAt   *string `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Status      *string `json:"status,omitempty"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
}

// Keys defines model for Keys.
type Keys struct {
	Keys   *[]Key  `json:"keys,omitempty"`
	Status *string `json:"status,omitempty"`
}

// ListBucket defines model for List-Bucket.
type ListBucket struct {
	Buckets *[]Bucket `json:"buckets,omitempty"`
	Status  *string   `json:"status,omitempty"`
}

// MigrateBucket defines model for Migrate-Bucket.
type MigrateBucket struct {
	From *string `json:"from,omitempty"`
	Path *string `json:"path,omitempty"`
	To   *string `json:"to,omitempty"`
}

// Objects defines model for Objects.
type Objects struct {
	Data *struct {
		Objects *struct {
			CommonPrefixes *[]struct {
				Prefix *string `json:"Prefix,omitempty"`
			} `json:"CommonPrefixes,omitempty"`
			Contents *[]struct {
				ChecksumAlgorithm *[]map[string]interface{} `json:"ChecksumAlgorithm,omitempty"`
				ETag              *string                   `json:"ETag,omitempty"`
				Key               *string                   `json:"Key,omitempty"`
				LastModified      *string                   `json:"LastModified,omitempty"`
				Size              *float32                  `json:"Size,omitempty"`
				StorageClass      *string                   `json:"StorageClass,omitempty"`
			} `json:"Contents,omitempty"`
			Delimiter   *string  `json:"Delimiter,omitempty"`
			IsTruncated *bool    `json:"IsTruncated,omitempty"`
			KeyCount    *float32 `json:"KeyCount,omitempty"`
			MaxKeys     *float32 `json:"MaxKeys,omitempty"`
			Name        *string  `json:"Name,omitempty"`
			Prefix      *string  `json:"Prefix,omitempty"`
		} `json:"objects,omitempty"`
	} `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
}

// Stat defines model for Stat.
type Stat struct {
	Data *struct {
		Object *struct {
			Etag         *string `json:"etag,omitempty"`
			LastModified *string `json:"lastModified,omitempty"`
			MetaData     *struct {
				ContentType *string `json:"content-type,omitempty"`
			} `json:"metaData,omitempty"`
			Size      *float32 `json:"size,omitempty"`
			VersionId *string  `json:"versionId,omitempty"`
		} `json:"object,omitempty"`
	} `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
}

// DownloadObjectParams defines parameters for DownloadObject.
type DownloadObjectParams struct {
	// Expiry example: 2 days 7 hours 45 minutes
	Expiry *string `form:"expiry,omitempty" json:"expiry,omitempty"`
}

// DeleteFolderParams defines parameters for DeleteFolder.
type DeleteFolderParams struct {
	Path string `form:"path" json:"path"`
}

// GetHisotricalMetricsParams defines parameters for GetHisotricalMetrics.
type GetHisotricalMetricsParams struct {
	// Since unix time
	Since string `form:"since" json:"since"`
}

// GetListObjectsParams defines parameters for GetListObjects.
type GetListObjectsParams struct {
	// Number specify number of object ( max: 50, min: 1 )
	Number *string `form:"number,omitempty" json:"number,omitempty"`
	Page   *string `form:"page,omitempty" json:"page,omitempty"`
}

// CreateBucketJSONRequestBody defines body for CreateBucket for application/json ContentType.
type CreateBucketJSONRequestBody = CreateBucket

// MigratingBucketsJSONRequestBody defines body for MigratingBuckets for application/json ContentType.
type MigratingBucketsJSONRequestBody = MigrateBucket

// CreateFolderJSONRequestBody defines body for CreateFolder for application/json ContentType.
type CreateFolderJSONRequestBody = CreateFolder

// CreateKeyJSONRequestBody defines body for CreateKey for application/json ContentType.
type CreateKeyJSONRequestBody = CreateKey

// UpdateKeyJSONRequestBody defines body for UpdateKey for application/json ContentType.
type UpdateKeyJSONRequestBody = CreateKey

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBuckets request
	GetBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBucketWithBody request with any body
	CreateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBucket(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigratingBucketsWithBody request with any body
	MigratingBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigratingBuckets(ctx context.Context, body MigratingBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListPreviousBuckets request
	GetListPreviousBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrations request
	GetMigrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroyBucket request
	DestroyBucket(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSingleBuckets request
	GetSingleBuckets(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckBucket request
	CheckBucket(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadObject request
	DownloadObject(ctx context.Context, bucket string, object string, params *DownloadObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFolder request
	DeleteFolder(ctx context.Context, bucket string, params *DeleteFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFolderWithBody request with any body
	CreateFolderWithBody(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFolder(ctx context.Context, bucket string, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHisotricalMetrics request
	GetHisotricalMetrics(ctx context.Context, bucket string, params *GetHisotricalMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricsSummary request
	GetMetricsSummary(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, bucket string, stat string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatObject request
	GetStatObject(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObject request
	DeleteObject(ctx context.Context, bucket string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjects request
	GetListObjects(ctx context.Context, bucket string, prefix string, params *GetListObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeBucketAccess request
	ChangeBucketAccess(ctx context.Context, bucket string, permission string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpgradeBucket request
	UpgradeBucket(ctx context.Context, bucket string, plan string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadObject request
	UploadObject(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListKeys request
	GetListKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKeyWithBody request with any body
	CreateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKey(ctx context.Context, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKey request
	DeleteKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKey request
	GetKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKeyWithBody request with any body
	UpdateKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateKey(ctx context.Context, key string, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeSecretKey request
	RevokeSecretKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBucketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucket(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigratingBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigratingBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigratingBuckets(ctx context.Context, body MigratingBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigratingBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListPreviousBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListPreviousBucketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyBucket(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroyBucketRequest(c.Server, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSingleBuckets(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSingleBucketsRequest(c.Server, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckBucket(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckBucketRequest(c.Server, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadObject(ctx context.Context, bucket string, object string, params *DownloadObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadObjectRequest(c.Server, bucket, object, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFolder(ctx context.Context, bucket string, params *DeleteFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFolderRequest(c.Server, bucket, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolderWithBody(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderRequestWithBody(c.Server, bucket, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolder(ctx context.Context, bucket string, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderRequest(c.Server, bucket, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHisotricalMetrics(ctx context.Context, bucket string, params *GetHisotricalMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHisotricalMetricsRequest(c.Server, bucket, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricsSummary(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsSummaryRequest(c.Server, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, bucket string, stat string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server, bucket, stat)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatObject(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatObjectRequest(c.Server, bucket, object)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObject(ctx context.Context, bucket string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectRequest(c.Server, bucket, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjects(ctx context.Context, bucket string, prefix string, params *GetListObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectsRequest(c.Server, bucket, prefix, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeBucketAccess(ctx context.Context, bucket string, permission string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeBucketAccessRequest(c.Server, bucket, permission)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeBucket(ctx context.Context, bucket string, plan string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeBucketRequest(c.Server, bucket, plan)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadObject(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadObjectRequest(c.Server, bucket, object)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKey(ctx context.Context, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKey(ctx context.Context, key string, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeSecretKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeSecretKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBucketsRequest generates requests for GetBuckets
func NewGetBucketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBucketRequest calls the generic CreateBucket builder with application/json body
func NewCreateBucketRequest(server string, body CreateBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBucketRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBucketRequestWithBody generates requests for CreateBucket with any type of body
func NewCreateBucketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigratingBucketsRequest calls the generic MigratingBuckets builder with application/json body
func NewMigratingBucketsRequest(server string, body MigratingBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigratingBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewMigratingBucketsRequestWithBody generates requests for MigratingBuckets with any type of body
func NewMigratingBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/migrates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListPreviousBucketsRequest generates requests for GetListPreviousBuckets
func NewGetListPreviousBucketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/migration/from")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMigrationsRequest generates requests for GetMigrations
func NewGetMigrationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/migrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestroyBucketRequest generates requests for DestroyBucket
func NewDestroyBucketRequest(server string, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSingleBucketsRequest generates requests for GetSingleBuckets
func NewGetSingleBucketsRequest(server string, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckBucketRequest generates requests for CheckBucket
func NewCheckBucketRequest(server string, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/check-availability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadObjectRequest generates requests for DownloadObject
func NewDownloadObjectRequest(server string, bucket string, object string, params *DownloadObjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object", runtime.ParamLocationPath, object)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/download/$%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expiry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiry", runtime.ParamLocationQuery, *params.Expiry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFolderRequest generates requests for DeleteFolder
func NewDeleteFolderRequest(server string, bucket string, params *DeleteFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFolderRequest calls the generic CreateFolder builder with application/json body
func NewCreateFolderRequest(server string, bucket string, body CreateFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFolderRequestWithBody(server, bucket, "application/json", bodyReader)
}

// NewCreateFolderRequestWithBody generates requests for CreateFolder with any type of body
func NewCreateFolderRequestWithBody(server string, bucket string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/folders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHisotricalMetricsRequest generates requests for GetHisotricalMetrics
func NewGetHisotricalMetricsRequest(server string, bucket string, params *GetHisotricalMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/metrics/historical", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsSummaryRequest generates requests for GetMetricsSummary
func NewGetMetricsSummaryRequest(server string, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/metrics/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string, bucket string, stat string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "stat", runtime.ParamLocationPath, stat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/metrics/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatObjectRequest generates requests for GetStatObject
func NewGetStatObjectRequest(server string, bucket string, object string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object", runtime.ParamLocationPath, object)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/objects/statistics/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteObjectRequest generates requests for DeleteObject
func NewDeleteObjectRequest(server string, bucket string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectsRequest generates requests for GetListObjects
func NewGetListObjectsRequest(server string, bucket string, prefix string, params *GetListObjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Number != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number", runtime.ParamLocationQuery, *params.Number); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeBucketAccessRequest generates requests for ChangeBucketAccess
func NewChangeBucketAccessRequest(server string, bucket string, permission string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission", runtime.ParamLocationPath, permission)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/type/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpgradeBucketRequest generates requests for UpgradeBucket
func NewUpgradeBucketRequest(server string, bucket string, plan string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "plan", runtime.ParamLocationPath, plan)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/upgrade/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadObjectRequest generates requests for UploadObject
func NewUploadObjectRequest(server string, bucket string, object string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object", runtime.ParamLocationPath, object)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/buckets/%s/upload/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListKeysRequest generates requests for GetListKeys
func NewGetListKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateKeyRequest calls the generic CreateKey builder with application/json body
func NewCreateKeyRequest(server string, body CreateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateKeyRequestWithBody generates requests for CreateKey with any type of body
func NewCreateKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyRequest generates requests for DeleteKey
func NewDeleteKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeyRequest generates requests for GetKey
func NewGetKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateKeyRequest calls the generic UpdateKey builder with application/json body
func NewUpdateKeyRequest(server string, key string, body UpdateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewUpdateKeyRequestWithBody generates requests for UpdateKey with any type of body
func NewUpdateKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevokeSecretKeyRequest generates requests for RevokeSecretKey
func NewRevokeSecretKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/keys/%s/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBucketsWithResponse request
	GetBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBucketsResp, error)

	// CreateBucketWithBodyWithResponse request with any body
	CreateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResp, error)

	CreateBucketWithResponse(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResp, error)

	// MigratingBucketsWithBodyWithResponse request with any body
	MigratingBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigratingBucketsResp, error)

	MigratingBucketsWithResponse(ctx context.Context, body MigratingBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*MigratingBucketsResp, error)

	// GetListPreviousBucketsWithResponse request
	GetListPreviousBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListPreviousBucketsResp, error)

	// GetMigrationsWithResponse request
	GetMigrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationsResp, error)

	// DestroyBucketWithResponse request
	DestroyBucketWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*DestroyBucketResp, error)

	// GetSingleBucketsWithResponse request
	GetSingleBucketsWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*GetSingleBucketsResp, error)

	// CheckBucketWithResponse request
	CheckBucketWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*CheckBucketResp, error)

	// DownloadObjectWithResponse request
	DownloadObjectWithResponse(ctx context.Context, bucket string, object string, params *DownloadObjectParams, reqEditors ...RequestEditorFn) (*DownloadObjectResp, error)

	// DeleteFolderWithResponse request
	DeleteFolderWithResponse(ctx context.Context, bucket string, params *DeleteFolderParams, reqEditors ...RequestEditorFn) (*DeleteFolderResp, error)

	// CreateFolderWithBodyWithResponse request with any body
	CreateFolderWithBodyWithResponse(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderResp, error)

	CreateFolderWithResponse(ctx context.Context, bucket string, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderResp, error)

	// GetHisotricalMetricsWithResponse request
	GetHisotricalMetricsWithResponse(ctx context.Context, bucket string, params *GetHisotricalMetricsParams, reqEditors ...RequestEditorFn) (*GetHisotricalMetricsResp, error)

	// GetMetricsSummaryWithResponse request
	GetMetricsSummaryWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*GetMetricsSummaryResp, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, bucket string, stat string, reqEditors ...RequestEditorFn) (*GetMetricsResp, error)

	// GetStatObjectWithResponse request
	GetStatObjectWithResponse(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*GetStatObjectResp, error)

	// DeleteObjectWithResponse request
	DeleteObjectWithResponse(ctx context.Context, bucket string, prefix string, reqEditors ...RequestEditorFn) (*DeleteObjectResp, error)

	// GetListObjectsWithResponse request
	GetListObjectsWithResponse(ctx context.Context, bucket string, prefix string, params *GetListObjectsParams, reqEditors ...RequestEditorFn) (*GetListObjectsResp, error)

	// ChangeBucketAccessWithResponse request
	ChangeBucketAccessWithResponse(ctx context.Context, bucket string, permission string, reqEditors ...RequestEditorFn) (*ChangeBucketAccessResp, error)

	// UpgradeBucketWithResponse request
	UpgradeBucketWithResponse(ctx context.Context, bucket string, plan string, reqEditors ...RequestEditorFn) (*UpgradeBucketResp, error)

	// UploadObjectWithResponse request
	UploadObjectWithResponse(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*UploadObjectResp, error)

	// GetListKeysWithResponse request
	GetListKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListKeysResp, error)

	// CreateKeyWithBodyWithResponse request with any body
	CreateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyResp, error)

	CreateKeyWithResponse(ctx context.Context, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyResp, error)

	// DeleteKeyWithResponse request
	DeleteKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteKeyResp, error)

	// GetKeyWithResponse request
	GetKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetKeyResp, error)

	// UpdateKeyWithBodyWithResponse request with any body
	UpdateKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResp, error)

	UpdateKeyWithResponse(ctx context.Context, key string, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyResp, error)

	// RevokeSecretKeyWithResponse request
	RevokeSecretKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*RevokeSecretKeyResp, error)
}

type GetBucketsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBucket
}

// Status returns HTTPResponse.Status
func (r GetBucketsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBucketsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBucketResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateBucketResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBucketResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigratingBucketsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MigratingBucketsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigratingBucketsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListPreviousBucketsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListPreviousBucketsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListPreviousBucketsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Migrations *[]map[string]interface{} `json:"migrations,omitempty"`
		Status     *string                   `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMigrationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyBucketResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroyBucketResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyBucketResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSingleBucketsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bucket *Bucket `json:"bucket,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSingleBucketsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSingleBucketsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckBucketResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CheckBucketResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckBucketResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Url *string `json:"url,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DownloadObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFolderResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFolderResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFolderResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFolderResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *struct {
			Folder *string `json:"folder,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateFolderResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFolderResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHisotricalMetricsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Bucket  *string `json:"bucket,omitempty"`
			Metrics *struct {
				TotolObjects *[]GetHisotricalMetrics_200_Data_Metrics_TotolObjects_Item `json:"totol_objects,omitempty"`
			} `json:"metrics,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}
type GetHisotricalMetrics200DataMetricsTotolObjects0 = float32
type GetHisotricalMetrics200DataMetricsTotolObjects1 = string
type GetHisotricalMetrics_200_Data_Metrics_TotolObjects_Item struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetHisotricalMetricsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHisotricalMetricsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsSummaryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Bucket  *string `json:"bucket,omitempty"`
			Metrics *struct {
				TotalBytes   *[]GetMetricsSummary_200_Data_Metrics_TotalBytes_Item   `json:"total_bytes,omitempty"`
				TotolObjects *[]GetMetricsSummary_200_Data_Metrics_TotolObjects_Item `json:"totol_objects,omitempty"`
			} `json:"metrics,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}
type GetMetricsSummary200DataMetricsTotalBytes0 = float32
type GetMetricsSummary200DataMetricsTotalBytes1 = string
type GetMetricsSummary_200_Data_Metrics_TotalBytes_Item struct {
	union json.RawMessage
}
type GetMetricsSummary200DataMetricsTotolObjects0 = float32
type GetMetricsSummary200DataMetricsTotolObjects1 = string
type GetMetricsSummary_200_Data_Metrics_TotolObjects_Item struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetMetricsSummaryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsSummaryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Bucket  *string `json:"bucket,omitempty"`
			Metrics *struct {
				Stat *[]GetMetrics_200_Data_Metrics_Stat_Item `json:"stat,omitempty"`
			} `json:"metrics,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}
type GetMetrics200DataMetricsStat0 = float32
type GetMetrics200DataMetricsStat1 = string
type GetMetrics_200_Data_Metrics_Stat_Item struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetMetricsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stat
}

// Status returns HTTPResponse.Status
func (r GetStatObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Objects
}

// Status returns HTTPResponse.Status
func (r GetListObjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeBucketAccessResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Permission *string `json:"permission,omitempty"`
		Status     *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ChangeBucketAccessResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeBucketAccessResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpgradeBucketResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Quota  *string `json:"quota,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpgradeBucketResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpgradeBucketResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Url *string `json:"url,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UploadObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListKeysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Keys
}

// Status returns HTTPResponse.Status
func (r GetListKeysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListKeysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *struct {
			AccessKey *string `json:"accessKey,omitempty"`
			SecretKey *string `json:"secretKey,omitempty"`
		} `json:"data,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeSecretKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessKey *string `json:"accessKey,omitempty"`
		SecretKey *string `json:"secretKey,omitempty"`
		Status    *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RevokeSecretKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeSecretKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBucketsWithResponse request returning *GetBucketsResp
func (c *ClientWithResponses) GetBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBucketsResp, error) {
	rsp, err := c.GetBuckets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBucketsResp(rsp)
}

// CreateBucketWithBodyWithResponse request with arbitrary body returning *CreateBucketResp
func (c *ClientWithResponses) CreateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResp, error) {
	rsp, err := c.CreateBucketWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResp(rsp)
}

func (c *ClientWithResponses) CreateBucketWithResponse(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResp, error) {
	rsp, err := c.CreateBucket(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResp(rsp)
}

// MigratingBucketsWithBodyWithResponse request with arbitrary body returning *MigratingBucketsResp
func (c *ClientWithResponses) MigratingBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigratingBucketsResp, error) {
	rsp, err := c.MigratingBucketsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigratingBucketsResp(rsp)
}

func (c *ClientWithResponses) MigratingBucketsWithResponse(ctx context.Context, body MigratingBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*MigratingBucketsResp, error) {
	rsp, err := c.MigratingBuckets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigratingBucketsResp(rsp)
}

// GetListPreviousBucketsWithResponse request returning *GetListPreviousBucketsResp
func (c *ClientWithResponses) GetListPreviousBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListPreviousBucketsResp, error) {
	rsp, err := c.GetListPreviousBuckets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListPreviousBucketsResp(rsp)
}

// GetMigrationsWithResponse request returning *GetMigrationsResp
func (c *ClientWithResponses) GetMigrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationsResp, error) {
	rsp, err := c.GetMigrations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationsResp(rsp)
}

// DestroyBucketWithResponse request returning *DestroyBucketResp
func (c *ClientWithResponses) DestroyBucketWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*DestroyBucketResp, error) {
	rsp, err := c.DestroyBucket(ctx, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroyBucketResp(rsp)
}

// GetSingleBucketsWithResponse request returning *GetSingleBucketsResp
func (c *ClientWithResponses) GetSingleBucketsWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*GetSingleBucketsResp, error) {
	rsp, err := c.GetSingleBuckets(ctx, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSingleBucketsResp(rsp)
}

// CheckBucketWithResponse request returning *CheckBucketResp
func (c *ClientWithResponses) CheckBucketWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*CheckBucketResp, error) {
	rsp, err := c.CheckBucket(ctx, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckBucketResp(rsp)
}

// DownloadObjectWithResponse request returning *DownloadObjectResp
func (c *ClientWithResponses) DownloadObjectWithResponse(ctx context.Context, bucket string, object string, params *DownloadObjectParams, reqEditors ...RequestEditorFn) (*DownloadObjectResp, error) {
	rsp, err := c.DownloadObject(ctx, bucket, object, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadObjectResp(rsp)
}

// DeleteFolderWithResponse request returning *DeleteFolderResp
func (c *ClientWithResponses) DeleteFolderWithResponse(ctx context.Context, bucket string, params *DeleteFolderParams, reqEditors ...RequestEditorFn) (*DeleteFolderResp, error) {
	rsp, err := c.DeleteFolder(ctx, bucket, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFolderResp(rsp)
}

// CreateFolderWithBodyWithResponse request with arbitrary body returning *CreateFolderResp
func (c *ClientWithResponses) CreateFolderWithBodyWithResponse(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderResp, error) {
	rsp, err := c.CreateFolderWithBody(ctx, bucket, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderResp(rsp)
}

func (c *ClientWithResponses) CreateFolderWithResponse(ctx context.Context, bucket string, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderResp, error) {
	rsp, err := c.CreateFolder(ctx, bucket, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderResp(rsp)
}

// GetHisotricalMetricsWithResponse request returning *GetHisotricalMetricsResp
func (c *ClientWithResponses) GetHisotricalMetricsWithResponse(ctx context.Context, bucket string, params *GetHisotricalMetricsParams, reqEditors ...RequestEditorFn) (*GetHisotricalMetricsResp, error) {
	rsp, err := c.GetHisotricalMetrics(ctx, bucket, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHisotricalMetricsResp(rsp)
}

// GetMetricsSummaryWithResponse request returning *GetMetricsSummaryResp
func (c *ClientWithResponses) GetMetricsSummaryWithResponse(ctx context.Context, bucket string, reqEditors ...RequestEditorFn) (*GetMetricsSummaryResp, error) {
	rsp, err := c.GetMetricsSummary(ctx, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsSummaryResp(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResp
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, bucket string, stat string, reqEditors ...RequestEditorFn) (*GetMetricsResp, error) {
	rsp, err := c.GetMetrics(ctx, bucket, stat, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResp(rsp)
}

// GetStatObjectWithResponse request returning *GetStatObjectResp
func (c *ClientWithResponses) GetStatObjectWithResponse(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*GetStatObjectResp, error) {
	rsp, err := c.GetStatObject(ctx, bucket, object, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatObjectResp(rsp)
}

// DeleteObjectWithResponse request returning *DeleteObjectResp
func (c *ClientWithResponses) DeleteObjectWithResponse(ctx context.Context, bucket string, prefix string, reqEditors ...RequestEditorFn) (*DeleteObjectResp, error) {
	rsp, err := c.DeleteObject(ctx, bucket, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectResp(rsp)
}

// GetListObjectsWithResponse request returning *GetListObjectsResp
func (c *ClientWithResponses) GetListObjectsWithResponse(ctx context.Context, bucket string, prefix string, params *GetListObjectsParams, reqEditors ...RequestEditorFn) (*GetListObjectsResp, error) {
	rsp, err := c.GetListObjects(ctx, bucket, prefix, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectsResp(rsp)
}

// ChangeBucketAccessWithResponse request returning *ChangeBucketAccessResp
func (c *ClientWithResponses) ChangeBucketAccessWithResponse(ctx context.Context, bucket string, permission string, reqEditors ...RequestEditorFn) (*ChangeBucketAccessResp, error) {
	rsp, err := c.ChangeBucketAccess(ctx, bucket, permission, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeBucketAccessResp(rsp)
}

// UpgradeBucketWithResponse request returning *UpgradeBucketResp
func (c *ClientWithResponses) UpgradeBucketWithResponse(ctx context.Context, bucket string, plan string, reqEditors ...RequestEditorFn) (*UpgradeBucketResp, error) {
	rsp, err := c.UpgradeBucket(ctx, bucket, plan, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeBucketResp(rsp)
}

// UploadObjectWithResponse request returning *UploadObjectResp
func (c *ClientWithResponses) UploadObjectWithResponse(ctx context.Context, bucket string, object string, reqEditors ...RequestEditorFn) (*UploadObjectResp, error) {
	rsp, err := c.UploadObject(ctx, bucket, object, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadObjectResp(rsp)
}

// GetListKeysWithResponse request returning *GetListKeysResp
func (c *ClientWithResponses) GetListKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListKeysResp, error) {
	rsp, err := c.GetListKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListKeysResp(rsp)
}

// CreateKeyWithBodyWithResponse request with arbitrary body returning *CreateKeyResp
func (c *ClientWithResponses) CreateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyResp, error) {
	rsp, err := c.CreateKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyResp(rsp)
}

func (c *ClientWithResponses) CreateKeyWithResponse(ctx context.Context, body CreateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyResp, error) {
	rsp, err := c.CreateKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyResp(rsp)
}

// DeleteKeyWithResponse request returning *DeleteKeyResp
func (c *ClientWithResponses) DeleteKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteKeyResp, error) {
	rsp, err := c.DeleteKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyResp(rsp)
}

// GetKeyWithResponse request returning *GetKeyResp
func (c *ClientWithResponses) GetKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetKeyResp, error) {
	rsp, err := c.GetKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyResp(rsp)
}

// UpdateKeyWithBodyWithResponse request with arbitrary body returning *UpdateKeyResp
func (c *ClientWithResponses) UpdateKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResp, error) {
	rsp, err := c.UpdateKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyResp(rsp)
}

func (c *ClientWithResponses) UpdateKeyWithResponse(ctx context.Context, key string, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyResp, error) {
	rsp, err := c.UpdateKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyResp(rsp)
}

// RevokeSecretKeyWithResponse request returning *RevokeSecretKeyResp
func (c *ClientWithResponses) RevokeSecretKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*RevokeSecretKeyResp, error) {
	rsp, err := c.RevokeSecretKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeSecretKeyResp(rsp)
}

// ParseGetBucketsResp parses an HTTP response from a GetBucketsWithResponse call
func ParseGetBucketsResp(rsp *http.Response) (*GetBucketsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBucketsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBucket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBucketResp parses an HTTP response from a CreateBucketWithResponse call
func ParseCreateBucketResp(rsp *http.Response) (*CreateBucketResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBucketResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMigratingBucketsResp parses an HTTP response from a MigratingBucketsWithResponse call
func ParseMigratingBucketsResp(rsp *http.Response) (*MigratingBucketsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigratingBucketsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListPreviousBucketsResp parses an HTTP response from a GetListPreviousBucketsWithResponse call
func ParseGetListPreviousBucketsResp(rsp *http.Response) (*GetListPreviousBucketsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListPreviousBucketsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMigrationsResp parses an HTTP response from a GetMigrationsWithResponse call
func ParseGetMigrationsResp(rsp *http.Response) (*GetMigrationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Migrations *[]map[string]interface{} `json:"migrations,omitempty"`
			Status     *string                   `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyBucketResp parses an HTTP response from a DestroyBucketWithResponse call
func ParseDestroyBucketResp(rsp *http.Response) (*DestroyBucketResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroyBucketResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSingleBucketsResp parses an HTTP response from a GetSingleBucketsWithResponse call
func ParseGetSingleBucketsResp(rsp *http.Response) (*GetSingleBucketsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSingleBucketsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bucket *Bucket `json:"bucket,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckBucketResp parses an HTTP response from a CheckBucketWithResponse call
func ParseCheckBucketResp(rsp *http.Response) (*CheckBucketResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckBucketResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadObjectResp parses an HTTP response from a DownloadObjectWithResponse call
func ParseDownloadObjectResp(rsp *http.Response) (*DownloadObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Url *string `json:"url,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFolderResp parses an HTTP response from a DeleteFolderWithResponse call
func ParseDeleteFolderResp(rsp *http.Response) (*DeleteFolderResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFolderResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFolderResp parses an HTTP response from a CreateFolderWithResponse call
func ParseCreateFolderResp(rsp *http.Response) (*CreateFolderResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFolderResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *struct {
				Folder *string `json:"folder,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetHisotricalMetricsResp parses an HTTP response from a GetHisotricalMetricsWithResponse call
func ParseGetHisotricalMetricsResp(rsp *http.Response) (*GetHisotricalMetricsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHisotricalMetricsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Bucket  *string `json:"bucket,omitempty"`
				Metrics *struct {
					TotolObjects *[]GetHisotricalMetrics_200_Data_Metrics_TotolObjects_Item `json:"totol_objects,omitempty"`
				} `json:"metrics,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricsSummaryResp parses an HTTP response from a GetMetricsSummaryWithResponse call
func ParseGetMetricsSummaryResp(rsp *http.Response) (*GetMetricsSummaryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsSummaryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Bucket  *string `json:"bucket,omitempty"`
				Metrics *struct {
					TotalBytes   *[]GetMetricsSummary_200_Data_Metrics_TotalBytes_Item   `json:"total_bytes,omitempty"`
					TotolObjects *[]GetMetricsSummary_200_Data_Metrics_TotolObjects_Item `json:"totol_objects,omitempty"`
				} `json:"metrics,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricsResp parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResp(rsp *http.Response) (*GetMetricsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Bucket  *string `json:"bucket,omitempty"`
				Metrics *struct {
					Stat *[]GetMetrics_200_Data_Metrics_Stat_Item `json:"stat,omitempty"`
				} `json:"metrics,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatObjectResp parses an HTTP response from a GetStatObjectWithResponse call
func ParseGetStatObjectResp(rsp *http.Response) (*GetStatObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObjectResp parses an HTTP response from a DeleteObjectWithResponse call
func ParseDeleteObjectResp(rsp *http.Response) (*DeleteObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectsResp parses an HTTP response from a GetListObjectsWithResponse call
func ParseGetListObjectsResp(rsp *http.Response) (*GetListObjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Objects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeBucketAccessResp parses an HTTP response from a ChangeBucketAccessWithResponse call
func ParseChangeBucketAccessResp(rsp *http.Response) (*ChangeBucketAccessResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeBucketAccessResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Permission *string `json:"permission,omitempty"`
			Status     *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpgradeBucketResp parses an HTTP response from a UpgradeBucketWithResponse call
func ParseUpgradeBucketResp(rsp *http.Response) (*UpgradeBucketResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpgradeBucketResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Quota  *string `json:"quota,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadObjectResp parses an HTTP response from a UploadObjectWithResponse call
func ParseUploadObjectResp(rsp *http.Response) (*UploadObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Url *string `json:"url,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListKeysResp parses an HTTP response from a GetListKeysWithResponse call
func ParseGetListKeysResp(rsp *http.Response) (*GetListKeysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListKeysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Keys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateKeyResp parses an HTTP response from a CreateKeyWithResponse call
func ParseCreateKeyResp(rsp *http.Response) (*CreateKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *struct {
				AccessKey *string `json:"accessKey,omitempty"`
				SecretKey *string `json:"secretKey,omitempty"`
			} `json:"data,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteKeyResp parses an HTTP response from a DeleteKeyWithResponse call
func ParseDeleteKeyResp(rsp *http.Response) (*DeleteKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeyResp parses an HTTP response from a GetKeyWithResponse call
func ParseGetKeyResp(rsp *http.Response) (*GetKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateKeyResp parses an HTTP response from a UpdateKeyWithResponse call
func ParseUpdateKeyResp(rsp *http.Response) (*UpdateKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeSecretKeyResp parses an HTTP response from a RevokeSecretKeyWithResponse call
func ParseRevokeSecretKeyResp(rsp *http.Response) (*RevokeSecretKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeSecretKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessKey *string `json:"accessKey,omitempty"`
			SecretKey *string `json:"secretKey,omitempty"`
			Status    *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcW3PbtvL/KjtsH5IZWZQT5/8/R0/HsZucTOIkE7dPraeFwBWFiAQYAHSsevzdz+BC",
	"6kJQlmxJrh29eGQSXCx2f3sFyOuIirwQHLlWUf86UnSEObE/X5d0jNr8KqQoUGqG9jqVSDQmx/aWnhQY",
	"9SOlJeNpdNOJWBK8zEmOwRsFypwpxQQP385I+IbSRJcqeKssklYGbzrVFTH4ilSb8Sd2QQdt690w60s4",
	"eCOyBGWTg4Lo0XqU3uOkSWZgF2h/Mo35rPCmBPwFIiWZmP8TVFSyQodXGWIhODehFJXytxqiCnH2xEG3",
	"KOflC1yuhVYBbJDf9zgJqGXsr9Za+1niMOpHP8VTtxJ7nxIb7QdW3spkiI0PTOlWSw3BaBlDns59eTpj",
	"qVzmQIZS5GGche26E2mx4tSf7K+AYhKiSfOqaBt+IvJc8M8Sh+wKl9mhG3JHjJ8IrqtA00L/ZIR0rMr8",
	"OEuFZHqUr+etfvmVpEGJtnmeD0TpM5GwIcOwCZ2zv2d9CC/zAUp7QwtJUjzJiFJ3lMcpZixn2rn8xszv",
	"1K+y5NRY6cz9gRAZEu7XdCJKroPsnZGrymQb9z62+cU1tBta31pWc66JXg+3zeuoW9Sd3abWHDU5Dc5F",
	"HUgP3CMrLUW1YeQSpQky75JdiNSMRlpKpifnxsG55Xz9buU2F0CiX7hGCXqEoMUYOXxnemT//es1Eomy",
	"D39BYbHQAeymXfgjcjeADGiChy9eHr36I+oC/BR1ImYojpCY1KWKudFxqUdCsr+JnXEK/YLZKGCYxSuN",
	"kpPsVFDVZPEN4wmIUkMuJAIZmJ8fGJEEnM8Db39RJyplZjjQulD9OE4EVd3MjOwyGfuQEFsCsQ2VfCgq",
	"PRMHKswJMyRUWRRC6v9UT0+XY680pqrHLUbo6BgUJRkZZNgBiRlzvwhPgAqlAYdDpJpd4sJiQImsNCRA",
	"C/DcwESUEkhRZIxaaYKJJ2DnPqCZKBMjXqYzw+cCuePP7+BU0DJHrolThIdk1I8Ou71uz7AuCuSkYFE/",
	"etntdQ8jF5isTmJSsPjyMJ6JrCkGAGXCMpAsAx8DLVFp2TXgj96ifu1JdCKJqhBcOXy+6PVmrM6mitOl",
	"xl+VS3hcxL4tns8mBxZi80yq0iahwzKDmjuz/qPeYXNFZyY/5CmQUo+Qa8+QGf7KcbxAG+UlSkgEKuBC",
	"Q7VGZ5ZlnhM5acrJSEOTVEX936ty68LkBUIFZOwyRAUEOH4HpxEQHAgH5wJA1SYxL31XFNSqkfitRKVf",
	"i2SyMdHP11AB4TvuPdtdOKYUC23MAi5JVqKCoZAwzcv78AwKyS7NMzEU5SBjFJ5bC7IDM2KHvOilHTgy",
	"f/5l/hz+Xy+F536JTBrfr2WJNw3MHa618PkAsY5LXgODAVC9Jgl8ccq6A06Pev9uDj8RfJgxF1vuA2Sn",
	"76m5L6K4E10dUJFgivzA4+1gIJLJgXeo5rclueBh4twl0y41DNrBmbhEMHmCc4SCV6gyTpNwoUc2EM2b",
	"gMvRGU9n3dDmzWChFAgAwI+AwRwfy7AaUtIuUXTUHP5RaHgjSp7cF0a1WmbksWEoGSVWFVh77CokXjJR",
	"qooPEMPKnYJZC6MIjLuo2w2FN0PlsyeyPNQ9UVVaMS6KrF2rSxXWnmhkZpZ63IzIAio5m5K7Z9IxHwDm",
	"2Vy9OH08gWObOFmiwVUwcu1+3Lj5M9TY5OTUXvfBabUU6RSVlmJSx7OCSJKjRmkYunY1jm3X1CXBYDad",
	"mvrvzgxsFtV80YDh0RN2CF6k7TnCTaey8YbpnjOeZjj1oztSx328wqDu/q3WctySN9hZKfMWNTg1LStm",
	"llhwTEdIxwfkkrCMDFjG9KTV7du2ILChKYaBEg50Nv90/QtVILUNH/hIcmwGaUtj1wbe+yEKjdvcyHZL",
	"EYsNj4Q5NK2Jx0R855kgSfzztZPrTSsev6AuJTdZo2IpxwRKmdnCtKLh400zzvj7n6rbW8FhpyFKaxuT",
	"Kgr6CQKT1WzfYzK8InmRYR9eQEImCv4fRqKUCo5eQc54aYo7P/e3EuVkOjleFcz+vysLC3ebbZNvtcbv",
	"3kJXygQqo6hRX9mlv7DcLod2W1ytkPG5DXRTqLX0Id04v8++PeMLgdvTfcrZ4nZBNKviGQj5C+19U9+q",
	"uhUbbtx2sXGx1e6r5936mm12QMNuc1ifXtl7zg23WVtBf+feWO1cc9SSURWPmCmNGSXZTNLTqMv+y5TQ",
	"dtSZe25nGUzJ2RVolmNL7qAYp/iAyXrYJqZFYWgH2gqw8YwWWmR/zhzVqDtMguOnoRXy4k5zg/5Fo/+0",
	"+f3mH9guR7UdQF4bQmWclWlcrGR4NdF2q/MEz/3IR1G8btQeSPbnYKJxg9bQ2ZvZIzAzjwlQNfLvZmPX",
	"Rt43K5jYtmuCeUKGqydhosqf5dqb0D/OhFLUYETFlGZ0bQPy7jGuKag40Btrtu810VvvcG2me3WxxfNI",
	"9ojjD40+u0mgib5j56eC37U7jLjKpt90q8+eDmnf7zOjHwKjbin7TtC9O0HtkOosbdrbDWgx9DBR8Axy",
	"ctV/1etAznj/0J4fCx7vqA7b/9Ph0tr9d0F4una/dKjWDm7xofLax+879T2t+T2MB65U9kM7YXsyZwre",
	"tTywUVZ8PT2XeePfR6Oj0CYt4Wm9J3tsxQuFyBidBA9hwLPqYGdcn/V8Hti2NVQdUUdzxwY4fVfs4VL1",
	"W15Y258sMjinIfx9tvhbdyu4LFJJEoP8jCzF/G9uYDWpGQ7P4GupNORkjKAKQhEGLE1RBsDtH9/uqYQW",
	"XGfkIRH9rRSaPHIwvwy8tiLkgCUJbgfu5oEXzQcGJIGUaPzuq+epSczDc30rsMchtnca4rfiiZ2F2B9P",
	"eIT5kUPhaiVq9cJzW+fD5Fr2vcstJrWW/lMO5G9RwwdfpXlhVjp5j5Pbt/rdxwbsy0IKqUQNY5y07Pe/",
	"t3e2uClfv++42K6gGZH12UnrLj3f45ql3W7gL/9Gg5Nk+O7Tdj4b2MAPoXjtvXvje+LrMU5W6oPNYinU",
	"+3LAvz3khtC4b1at26xy0l70YsFsyng/ElTcW2d/u9HaU35XyYg4rJHWMi+ZeWnPxKUxTuAZSExwyDgG",
	"S7uEbNnKHl3M2p+G30Eya5E6bqL7HvEmlngpxrikD/LFDliWbrkR53UWsUMvdkfE3T0f2pdeK6I1BJt5",
	"lzz7WRMLE/tBk98vjK7dJA4981/m8B3mA/8eapdJwrvTz3Vc1LMs8v2pkrfy3xypOw4ekvULXLc+6Vbj",
	"H3Pfvrr1mWF10NM/Vp3ovf3Julnhn/TF683Fzf8CAAD//x8Pn9jjTwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
