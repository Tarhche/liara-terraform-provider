// Package db_inspector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package db_inspector

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// Defines values for CreateRoleRequestPrivileges.
const (
	CreateRoleRequestPrivilegesBypassrls   CreateRoleRequestPrivileges = "bypassrls"
	CreateRoleRequestPrivilegesCreatedb    CreateRoleRequestPrivileges = "createdb"
	CreateRoleRequestPrivilegesCreaterole  CreateRoleRequestPrivileges = "createrole"
	CreateRoleRequestPrivilegesInherit     CreateRoleRequestPrivileges = "inherit"
	CreateRoleRequestPrivilegesReplication CreateRoleRequestPrivileges = "replication"
	CreateRoleRequestPrivilegesSuperuser   CreateRoleRequestPrivileges = "superuser"
)

// Defines values for UpdateRoleRequestPrivileges.
const (
	UpdateRoleRequestPrivilegesBypassrls   UpdateRoleRequestPrivileges = "bypassrls"
	UpdateRoleRequestPrivilegesCreatedb    UpdateRoleRequestPrivileges = "createdb"
	UpdateRoleRequestPrivilegesCreaterole  UpdateRoleRequestPrivileges = "createrole"
	UpdateRoleRequestPrivilegesInherit     UpdateRoleRequestPrivileges = "inherit"
	UpdateRoleRequestPrivilegesReplication UpdateRoleRequestPrivileges = "replication"
	UpdateRoleRequestPrivilegesSuperuser   UpdateRoleRequestPrivileges = "superuser"
)

// CreateDataResponse defines model for CreateDataResponse.
type CreateDataResponse struct {
	Message *string `json:"message,omitempty"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	// ConnectionLimit Maximum number of connections for the role (optional)
	ConnectionLimit *int `json:"connectionLimit"`

	// Password Password for the role (optional)
	Password *string `json:"password"`

	// Privileges List of privileges for the role
	Privileges *[]CreateRoleRequestPrivileges `json:"privileges,omitempty"`

	// Rolename Role name
	Rolename *string `json:"rolename,omitempty"`

	// ValidUntil Expiration date for the role (optional)
	ValidUntil *time.Time `json:"validUntil"`
}

// CreateRoleRequestPrivileges defines model for CreateRoleRequest.Privileges.
type CreateRoleRequestPrivileges string

// CreateRoleResponse defines model for CreateRoleResponse.
type CreateRoleResponse struct {
	Message *string `json:"message,omitempty"`
}

// DatabaseRole defines model for DatabaseRole.
type DatabaseRole struct {
	CanCreateDatabases *bool   `json:"can_create_databases,omitempty"`
	CanCreateRoles     *bool   `json:"can_create_roles,omitempty"`
	CanInheritRoles    *bool   `json:"can_inherit_roles,omitempty"`
	CanLogin           *bool   `json:"can_login,omitempty"`
	CanReplicate       *bool   `json:"can_replicate,omitempty"`
	ConnectionLimit    *int    `json:"connection_limit,omitempty"`
	InheritedRoles     *string `json:"inherited_roles,omitempty"`
	IsSuperuser        *bool   `json:"is_superuser,omitempty"`
	MemberOf           *string `json:"member_of,omitempty"`
	Rolename           *string `json:"rolename,omitempty"`
	ValidUntil         *string `json:"valid_until"`
}

// DatabaseRolesResponse defines model for DatabaseRolesResponse.
type DatabaseRolesResponse struct {
	Data *[]DatabaseRole `json:"data,omitempty"`
}

// DeleteDataResponse defines model for DeleteDataResponse.
type DeleteDataResponse struct {
	Message *string `json:"message,omitempty"`
}

// DeleteRoleResponse defines model for DeleteRoleResponse.
type DeleteRoleResponse struct {
	Message *string `json:"message,omitempty"`
}

// Error400Response defines model for Error400Response.
type Error400Response struct {
	Error *struct {
		Error      *string `json:"error,omitempty"`
		Message    *string `json:"message,omitempty"`
		StatusCode *int    `json:"statusCode,omitempty"`
	} `json:"error,omitempty"`
}

// Error401Response defines model for Error401Response.
type Error401Response struct {
	Error *struct {
		Error *string `json:"error,omitempty"`
	} `json:"error,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *struct {
		Error      *string `json:"error,omitempty"`
		Message    *string `json:"message,omitempty"`
		StatusCode *int    `json:"statusCode,omitempty"`
	} `json:"error,omitempty"`
}

// FilterDataRequest defines model for FilterDataRequest.
type FilterDataRequest struct {
	Filter *[]struct {
		Column   *string     `json:"column,omitempty"`
		Operator *string     `json:"operator,omitempty"`
		Value    interface{} `json:"value,omitempty"`
	} `json:"filter,omitempty"`
}

// GetDatabaseByNameResponse defines model for GetDatabaseByNameResponse.
type GetDatabaseByNameResponse struct {
	Count  *int                      `json:"count,omitempty"`
	Data   *[]map[string]interface{} `json:"data,omitempty"`
	Schema *map[string]interface{}   `json:"schema,omitempty"`
}

// GetDatasetsResponse defines model for GetDatasetsResponse.
type GetDatasetsResponse struct {
	Data *[]struct {
		DatasetName *string `json:"dataset_name,omitempty"`
	} `json:"data,omitempty"`
}

// QueryRequest defines model for QueryRequest.
type QueryRequest struct {
	Query *string `json:"query,omitempty"`
}

// UpdateDataResponse defines model for UpdateDataResponse.
type UpdateDataResponse struct {
	Message *string `json:"message,omitempty"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	// ConnectionLimit Maximum number of connections for the role (optional)
	ConnectionLimit *int `json:"connectionLimit"`

	// Password Password for the role (optional)
	Password *string `json:"password"`

	// Privileges List of privileges for the role
	Privileges *[]UpdateRoleRequestPrivileges `json:"privileges,omitempty"`

	// ValidUntil Expiration date for the role (optional)
	ValidUntil *time.Time `json:"validUntil"`
}

// UpdateRoleRequestPrivileges defines model for UpdateRoleRequest.Privileges.
type UpdateRoleRequestPrivileges string

// UpdateRoleResponse defines model for UpdateRoleResponse.
type UpdateRoleResponse struct {
	Message *string `json:"message,omitempty"`
}

// GetDatasetByNameParams defines parameters for GetDatasetByName.
type GetDatasetByNameParams struct {
	// Page page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Count count
	Count *int `form:"count,omitempty" json:"count,omitempty"`
}

// FilterDatasetParams defines parameters for FilterDataset.
type FilterDatasetParams struct {
	// Page page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Count count
	Count *int `form:"count,omitempty" json:"count,omitempty"`
}

// FilterDatasetJSONRequestBody defines body for FilterDataset for application/json ContentType.
type FilterDatasetJSONRequestBody = FilterDataRequest

// QueriesJSONRequestBody defines body for Queries for application/json ContentType.
type QueriesJSONRequestBody = QueryRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllDatasets request
	GetAllDatasets(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatasetByName request
	GetDatasetByName(ctx context.Context, databaseID string, datasetName string, params *GetDatasetByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteData request
	DeleteData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateData request
	CreateData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateData request
	UpdateData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilterDatasetWithBody request with any body
	FilterDatasetWithBody(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FilterDataset(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, body FilterDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueriesWithBody request with any body
	QueriesWithBody(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Queries(ctx context.Context, databaseID string, body QueriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRoles request
	GetAllRoles(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, databaseID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, databaseID string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, databaseID string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, databaseID string, roleName string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllDatasets(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllDatasetsRequest(c.Server, databaseID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatasetByName(ctx context.Context, databaseID string, datasetName string, params *GetDatasetByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatasetByNameRequest(c.Server, databaseID, datasetName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDataRequest(c.Server, databaseID, datasetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDataRequest(c.Server, databaseID, datasetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateData(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDataRequest(c.Server, databaseID, datasetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilterDatasetWithBody(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilterDatasetRequestWithBody(c.Server, databaseID, datasetName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilterDataset(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, body FilterDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilterDatasetRequest(c.Server, databaseID, datasetName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueriesWithBody(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueriesRequestWithBody(c.Server, databaseID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Queries(ctx context.Context, databaseID string, body QueriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueriesRequest(c.Server, databaseID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRoles(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRolesRequest(c.Server, databaseID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, databaseID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, databaseID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, databaseID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, databaseID string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, databaseID, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, databaseID string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, databaseID, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, databaseID string, roleName string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, databaseID, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllDatasetsRequest generates requests for GetAllDatasets
func NewGetAllDatasetsRequest(server string, databaseID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatasetByNameRequest generates requests for GetDatasetByName
func NewGetDatasetByNameRequest(server string, databaseID string, datasetName string, params *GetDatasetByNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDataRequest generates requests for DeleteData
func NewDeleteDataRequest(server string, databaseID string, datasetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets/%s/data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDataRequest generates requests for CreateData
func NewCreateDataRequest(server string, databaseID string, datasetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets/%s/data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDataRequest generates requests for UpdateData
func NewUpdateDataRequest(server string, databaseID string, datasetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets/%s/data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilterDatasetRequest calls the generic FilterDataset builder with application/json body
func NewFilterDatasetRequest(server string, databaseID string, datasetName string, params *FilterDatasetParams, body FilterDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFilterDatasetRequestWithBody(server, databaseID, datasetName, params, "application/json", bodyReader)
}

// NewFilterDatasetRequestWithBody generates requests for FilterDataset with any type of body
func NewFilterDatasetRequestWithBody(server string, databaseID string, datasetName string, params *FilterDatasetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/datasets/%s/filter", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueriesRequest calls the generic Queries builder with application/json body
func NewQueriesRequest(server string, databaseID string, body QueriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueriesRequestWithBody(server, databaseID, "application/json", bodyReader)
}

// NewQueriesRequestWithBody generates requests for Queries with any type of body
func NewQueriesRequestWithBody(server string, databaseID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/queries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllRolesRequest generates requests for GetAllRoles
func NewGetAllRolesRequest(server string, databaseID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, databaseID string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, databaseID, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, databaseID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, databaseID string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleName", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, databaseID string, roleName string, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, databaseID, roleName, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, databaseID string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleName", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/databases/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllDatasetsWithResponse request
	GetAllDatasetsWithResponse(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*GetAllDatasetsResp, error)

	// GetDatasetByNameWithResponse request
	GetDatasetByNameWithResponse(ctx context.Context, databaseID string, datasetName string, params *GetDatasetByNameParams, reqEditors ...RequestEditorFn) (*GetDatasetByNameResp, error)

	// DeleteDataWithResponse request
	DeleteDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*DeleteDataResp, error)

	// CreateDataWithResponse request
	CreateDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*CreateDataResp, error)

	// UpdateDataWithResponse request
	UpdateDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*UpdateDataResp, error)

	// FilterDatasetWithBodyWithResponse request with any body
	FilterDatasetWithBodyWithResponse(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilterDatasetResp, error)

	FilterDatasetWithResponse(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, body FilterDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*FilterDatasetResp, error)

	// QueriesWithBodyWithResponse request with any body
	QueriesWithBodyWithResponse(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueriesResp, error)

	QueriesWithResponse(ctx context.Context, databaseID string, body QueriesJSONRequestBody, reqEditors ...RequestEditorFn) (*QueriesResp, error)

	// GetAllRolesWithResponse request
	GetAllRolesWithResponse(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*GetAllRolesResp, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResp, error)

	CreateRoleWithResponse(ctx context.Context, databaseID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResp, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, databaseID string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRoleResp, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, databaseID string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error)

	UpdateRoleWithResponse(ctx context.Context, databaseID string, roleName string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error)
}

type GetAllDatasetsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetDatasetsResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllDatasetsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllDatasetsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatasetByNameResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetDatabaseByNameResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDatasetByNameResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatasetByNameResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeleteDataResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateDataResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateDataResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilterDatasetResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetDatabaseByNameResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FilterDatasetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilterDatasetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueriesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetDatabaseByNameResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRolesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseRolesResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllRolesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRolesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateRoleResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeleteRoleResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateRoleResponse
	JSON400      *Error400Response
	JSON401      *Error401Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllDatasetsWithResponse request returning *GetAllDatasetsResp
func (c *ClientWithResponses) GetAllDatasetsWithResponse(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*GetAllDatasetsResp, error) {
	rsp, err := c.GetAllDatasets(ctx, databaseID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllDatasetsResp(rsp)
}

// GetDatasetByNameWithResponse request returning *GetDatasetByNameResp
func (c *ClientWithResponses) GetDatasetByNameWithResponse(ctx context.Context, databaseID string, datasetName string, params *GetDatasetByNameParams, reqEditors ...RequestEditorFn) (*GetDatasetByNameResp, error) {
	rsp, err := c.GetDatasetByName(ctx, databaseID, datasetName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatasetByNameResp(rsp)
}

// DeleteDataWithResponse request returning *DeleteDataResp
func (c *ClientWithResponses) DeleteDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*DeleteDataResp, error) {
	rsp, err := c.DeleteData(ctx, databaseID, datasetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDataResp(rsp)
}

// CreateDataWithResponse request returning *CreateDataResp
func (c *ClientWithResponses) CreateDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*CreateDataResp, error) {
	rsp, err := c.CreateData(ctx, databaseID, datasetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDataResp(rsp)
}

// UpdateDataWithResponse request returning *UpdateDataResp
func (c *ClientWithResponses) UpdateDataWithResponse(ctx context.Context, databaseID string, datasetName string, reqEditors ...RequestEditorFn) (*UpdateDataResp, error) {
	rsp, err := c.UpdateData(ctx, databaseID, datasetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDataResp(rsp)
}

// FilterDatasetWithBodyWithResponse request with arbitrary body returning *FilterDatasetResp
func (c *ClientWithResponses) FilterDatasetWithBodyWithResponse(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilterDatasetResp, error) {
	rsp, err := c.FilterDatasetWithBody(ctx, databaseID, datasetName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilterDatasetResp(rsp)
}

func (c *ClientWithResponses) FilterDatasetWithResponse(ctx context.Context, databaseID string, datasetName string, params *FilterDatasetParams, body FilterDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*FilterDatasetResp, error) {
	rsp, err := c.FilterDataset(ctx, databaseID, datasetName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilterDatasetResp(rsp)
}

// QueriesWithBodyWithResponse request with arbitrary body returning *QueriesResp
func (c *ClientWithResponses) QueriesWithBodyWithResponse(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueriesResp, error) {
	rsp, err := c.QueriesWithBody(ctx, databaseID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueriesResp(rsp)
}

func (c *ClientWithResponses) QueriesWithResponse(ctx context.Context, databaseID string, body QueriesJSONRequestBody, reqEditors ...RequestEditorFn) (*QueriesResp, error) {
	rsp, err := c.Queries(ctx, databaseID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueriesResp(rsp)
}

// GetAllRolesWithResponse request returning *GetAllRolesResp
func (c *ClientWithResponses) GetAllRolesWithResponse(ctx context.Context, databaseID string, reqEditors ...RequestEditorFn) (*GetAllRolesResp, error) {
	rsp, err := c.GetAllRoles(ctx, databaseID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRolesResp(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResp
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, databaseID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResp, error) {
	rsp, err := c.CreateRoleWithBody(ctx, databaseID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResp(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, databaseID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResp, error) {
	rsp, err := c.CreateRole(ctx, databaseID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResp(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResp
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, databaseID string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRoleResp, error) {
	rsp, err := c.DeleteRole(ctx, databaseID, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResp(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResp
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, databaseID string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, databaseID, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResp(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, databaseID string, roleName string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error) {
	rsp, err := c.UpdateRole(ctx, databaseID, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResp(rsp)
}

// ParseGetAllDatasetsResp parses an HTTP response from a GetAllDatasetsWithResponse call
func ParseGetAllDatasetsResp(rsp *http.Response) (*GetAllDatasetsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllDatasetsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetDatasetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDatasetByNameResp parses an HTTP response from a GetDatasetByNameWithResponse call
func ParseGetDatasetByNameResp(rsp *http.Response) (*GetDatasetByNameResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatasetByNameResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetDatabaseByNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteDataResp parses an HTTP response from a DeleteDataWithResponse call
func ParseDeleteDataResp(rsp *http.Response) (*DeleteDataResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeleteDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDataResp parses an HTTP response from a CreateDataWithResponse call
func ParseCreateDataResp(rsp *http.Response) (*CreateDataResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDataResp parses an HTTP response from a UpdateDataWithResponse call
func ParseUpdateDataResp(rsp *http.Response) (*UpdateDataResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFilterDatasetResp parses an HTTP response from a FilterDatasetWithResponse call
func ParseFilterDatasetResp(rsp *http.Response) (*FilterDatasetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilterDatasetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetDatabaseByNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseQueriesResp parses an HTTP response from a QueriesWithResponse call
func ParseQueriesResp(rsp *http.Response) (*QueriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetDatabaseByNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAllRolesResp parses an HTTP response from a GetAllRolesWithResponse call
func ParseGetAllRolesResp(rsp *http.Response) (*GetAllRolesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRolesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateRoleResp parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResp(rsp *http.Response) (*CreateRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResp parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResp(rsp *http.Response) (*DeleteRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeleteRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResp parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResp(rsp *http.Response) (*UpdateRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HwAA//99AIFQ1lkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
